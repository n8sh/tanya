/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/**
 * Advanced Encryption Standard.
 *
 * Copyright: Eugene Wissner 2017.
 * License: $(LINK2 https://www.mozilla.org/en-US/MPL/2.0/,
 *                  Mozilla Public License, v. 2.0).
 * Authors: $(LINK2 mailto:info@caraus.de, Eugene Wissner)
 */
module tanya.crypto.aes;

import core.stdc.string;
import std.algorithm.mutation;
import tanya.container.vector;
import tanya.crypto.symmetric;
import tanya.memory;

/**
 * Advanced Encryption Standard.
 *
 * Params:
 *  K = Key length.
 */
final class AES(uint K) : BlockCipher
    if (K == 128 || K == 256)
{
    mixin FixedBlockLength!16;
    mixin KeyLength!(K / 8);

    private Vector!ubyte key_;

    /**
     * Params:
     *  key = Key.
     *
     * Precondition: $(D_INLINECODE key.length == this.keyLength).
     */
    this(ref const Vector!ubyte key)
    in
    {
        assert(key.length == this.keyLength);
    }
    body
    {
        this.key = key;
    }

    /// Ditto.
    this()
    {
    }

    /**
     * Resets the key.
     *
     * Params:
     *  key = Key.
     *
     * Precondition: $(D_INLINECODE key.length == this.keyLength).
     */
    @property void key(ref const Vector!ubyte key)
    in
    {
        assert(key.length == this.keyLength);
    }
    body
    {
        this.key_ = key;
    }

    /**
     * Encrypts a block.
     *
     * Params:
     *  plain  = Plain text, input.
     *  cipher = Cipher text, output.
     *
     * Precondition: $(D_INLINECODE plain.length == blockLength && cipher.length == blockLength).
     */
    void encrypt(ref const Vector!ubyte plain, ref Vector!ubyte cipher)
    {
        blockEncrypt(plain.get(), cipher.get(), this.key_.get());
    }

    /**
     * Decrypts a block.
     *
     * Params:
     *  cipher = Cipher text, input.
     *  plain  = Plain text, output.
     *
     * Precondition: $(D_INLINECODE plain.length == blockLength && cipher.length == blockLength).
     */
    void decrypt(ref const Vector!ubyte cipher, ref Vector!ubyte plain)
    {
        blockDecrypt(cipher.get(), plain.get(), this.key_.get());
    }

    private const ubyte[16][16] sBox = [
        [ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 ],
        [ 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0 ],
        [ 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15 ],
        [ 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75 ],
        [ 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84 ],
        [ 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf ],
        [ 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8 ],
        [ 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2 ],
        [ 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73 ],
        [ 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb ],
        [ 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79 ],
        [ 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08 ],
        [ 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a ],
        [ 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e ],
        [ 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf ],
        [ 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 ],
    ];

    private const ubyte[16][16] inverseSBox = [
        [ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb ],
        [ 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb ],
        [ 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e ],
        [ 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25 ],
        [ 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92 ],
        [ 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84 ],
        [ 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06 ],
        [ 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b ],
        [ 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73 ],
        [ 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e ],
        [ 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b ],
        [ 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4 ],
        [ 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f ],
        [ 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef ],
        [ 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61 ],
        [ 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d ],
    ];

    void blockEncrypt(const(ubyte)[] input_block, ubyte[] output_block, in ubyte[] key)
    {
        int round;
        ubyte[4][4] state;
        ubyte[4][60] w;

        foreach (r; 0 .. 4)
        {
            foreach (c; 0 .. 4)
            {
                state[r][c] = input_block[r + (4 * c)];
            }
        }
        // rounds = key size in 4-bytes words + 6
        auto nr = (key.length >> 2) + 6;

        computeKeySchedule(key, w);

        addRoundKey(state, w);

        for (round = 0; round < nr; round++)
        {
            subBytes(state);
            shiftRows(state);

            if (round < (nr - 1))
            {
                mixColumns(state);
            }
            addRoundKey(state, w[(round + 1) * 4 .. $][0 .. 4]);
        }

        foreach (r; 0 .. 4)
        {
            foreach (c; 0 .. 4)
            {
                output_block[r + 4 * c] = state[r][c];
            }
        }
    }

    private void blockDecrypt(in ubyte[] input_block, ubyte[] output_block, in ubyte[] key)
    {
        int round;
        int nr;
        ubyte[4][4] state;
        ubyte[4][60] w;

        foreach (r; 0 .. 4)
        {
            foreach (c; 0 .. 4)
            {
                state[r][c] = input_block[r + (4 * c)];
            }
        }
        // rounds = key size in 4-byte words + 6
        nr = (keyLength >> 2) + 6;

        computeKeySchedule(key, w);

        addRoundKey(state, w[nr * 4 .. $][0 .. 4]);

        for (round = nr; round > 0; round--)
        {
            invShiftRows(state);
            invSubBytes(state);
            addRoundKey(state, w[(round - 1) * 4 .. $][0 .. 4]);
            if (round > 1)
            {
                invMixColumns(state);
            }
        }

        foreach (r; 0 .. 4)
        {
            foreach (c; 0 .. 4)
            {
                output_block[r + (4 * c)] = state[r][c];
            }
        }
    }

    private void computeKeySchedule(in ubyte[] key, ubyte[4][] w)
    {
        auto key_words = key.length >> 2;
        ubyte rcon = 0x01;

        // First copy the key directly into the key schedule
        memcpy(w.ptr, key.ptr, key.length);
        for (auto i = key_words; i < 4 * (key_words + 7); i++)
        {
            memcpy(w[i].ptr, w[i - 1].ptr, 4);

            if (!(i % key_words))
            {
                rotWord(w[i]);
                subWord(w[i]);
                if (!(i % 36))
                {
                    rcon = 0x1B;
                }
                w[i][0] ^= rcon;
                rcon <<= 1;
            }
            else if ((key_words > 6) && (i % key_words) == 4)
            {
                subWord(w[i]);
            }
            w[i][0] ^= w[i - key_words][0];
            w[i][1] ^= w[i - key_words][1];
            w[i][2] ^= w[i - key_words][2];
            w[i][3] ^= w[i - key_words][3];
        }
    }

    private void rotWord(ref ubyte[4] w) pure nothrow @safe @nogc
    {
        ubyte tmp;

        tmp = w[0];
        w[0] = w[1];
        w[1] = w[2];
        w[2] = w[3];
        w[3] = tmp;
    }

    private void subWord(ref ubyte[4] w)
    {
        foreach (i; 0 .. 4)
        {
            w[i] = this.sBox[(w[i] & 0xF0) >> 4][(w[i] & 0x0F)];
        }
    }

    private void addRoundKey(ubyte[4][] state, ubyte[4][] w)
    {
        foreach (c; 0 .. 4)
        {
            foreach (r; 0 .. 4)
            {
                state[r][c] ^= w[c][r];
            }
        }
    }

    private void subBytes(ubyte[4][] state)
    {
        foreach (r; 0 .. 4)
        {
            foreach (c; 0 .. 4)
            {
                state[r][c] = this.sBox[(state[r][c] & 0xF0) >> 4][state[r][c] & 0x0F];
            }
        }
    }

    private void shiftRows(ubyte[4][] state) pure nothrow @safe @nogc
    {
        int tmp;

        tmp = state[1][0];
        state[1][0] = state[1][1];
        state[1][1] = state[1][2];
        state[1][2] = state[1][3];
        state[1][3] = cast(ubyte) tmp;

        tmp = state[2][0];
        state[2][0] = state[2][2];
        state[2][2] = cast(ubyte) tmp;
        tmp = state[2][1];
        state[2][1] = state[2][3];
        state[2][3] = cast(ubyte) tmp;

        tmp = state[3][3];
        state[3][3] = state[3][2];
        state[3][2] = state[3][1];
        state[3][1] = state[3][0];
        state[3][0] = cast(ubyte) tmp;
    }

    private ubyte xtime(ubyte x)
    {
        return cast(ubyte) ((x << 1) ^ ((x & 0x80) ? 0x1b : 0x00));
    }

    private ubyte multiply(ubyte x, ubyte y)
    {
        ubyte product;

        for (ubyte mask = 0x01; mask; mask <<= 1)
        {
            if (y & mask)
            {
                product ^= x;
            }
            x = xtime(x);
        }

        return product;
    }

    private void invSubBytes(ubyte[4][] state)
    {
        foreach (r; 0 .. 4)
        {
            foreach (c; 0 .. 4)
            {
                state[r][c] = this.inverseSBox[(state[r][c] & 0xF0) >> 4][state[r][c] & 0x0F];
            }
        }
    }

    private void invMixColumns(ubyte[4][] s)
    {
        ubyte[4] t;

        foreach (c; 0 .. 4)
        {
            t[0] = multiply(0x0E, s[0][c]) ^ multiply(0x0B, s[1][c]) ^ multiply(0x0D, s[2][c]) ^ multiply(0x09, s[3][c]);
            t[1] = multiply(0x09, s[0][c]) ^ multiply(0x0E, s[1][c]) ^ multiply(0x0B, s[2][c]) ^ multiply(0x0D, s[3][c]);
            t[2] = multiply(0x0D, s[0][c]) ^ multiply(0x09, s[1][c]) ^ multiply(0x0E, s[2][c]) ^ multiply(0x0B, s[3][c]);
            t[3] = multiply(0x0B, s[0][c]) ^ multiply(0x0D, s[1][c]) ^ multiply(0x09, s[2][c]) ^ multiply(0x0E, s[3][c]);

            s[0][c] = t[0];
            s[1][c] = t[1];
            s[2][c] = t[2];
            s[3][c] = t[3];
        }
    }

    private void mixColumns(ubyte[4][] s)
    {
        ubyte[4] t;

        foreach (c; 0 .. 4)
        {
            t[0] = multiply(2, s[0][c]) ^ multiply(3, s[1][c]) ^ s[2][c] ^ s[3][c];
            t[1] = s[0][c] ^ multiply(2, s[1][c]) ^ multiply(3, s[2][c]) ^ s[3][c];
            t[2] = s[0][c] ^ s[1][c] ^ multiply(2, s[2][c]) ^ multiply(3, s[3][c]);
            t[3] = multiply(3, s[0][c]) ^ s[1][c] ^ s[2][c] ^  multiply(2, s[3][c]);

            s[0][c] = t[0];
            s[1][c] = t[1];
            s[2][c] = t[2];
            s[3][c] = t[3];
        }
    }

    private void invShiftRows(ubyte[4][] state)
    {
        int tmp;

        tmp = state[1][2];
        state[1][2] = state[1][1];
        state[1][1] = state[1][0];
        state[1][0] = state[1][3];
        state[1][3] = cast(ubyte) tmp;

        tmp = state[2][0];
        state[2][0] = state[2][2];
        state[2][2] = cast(ubyte) tmp;
        tmp = state[2][1];
        state[2][1] = state[2][3];
        state[2][3] = cast(ubyte) tmp;

        tmp = state[3][0];
        state[3][0] = state[3][1];
        state[3][1] = state[3][2];
        state[3][2] = state[3][3];
        state[3][3] = cast(ubyte) tmp;
    }
}

// GFSbox Know Answer Test Values. Keysize = 128.
unittest
{
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xf3, 0x44, 0x81, 0xec, 0x3c, 0xc6, 0x27, 0xba, 0xcd, 0x5d, 0xc3, 0xfb, 0x08, 0xf2, 0x73, 0xe6,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x03, 0x36, 0x76, 0x3e, 0x96, 0x6d, 0x92, 0x59, 0x5a, 0x56, 0x7c, 0xc9, 0xce, 0x53, 0x7f, 0x5e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x97, 0x98, 0xc4, 0x64, 0x0b, 0xad, 0x75, 0xc7, 0xc3, 0x22, 0x7d, 0xb9, 0x10, 0x17, 0x4e, 0x72,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa9, 0xa1, 0x63, 0x1b, 0xf4, 0x99, 0x69, 0x54, 0xeb, 0xc0, 0x93, 0x95, 0x7b, 0x23, 0x45, 0x89,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x96, 0xab, 0x5c, 0x2f, 0xf6, 0x12, 0xd9, 0xdf, 0xaa, 0xe8, 0xc3, 0x1f, 0x30, 0xc4, 0x21, 0x68,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xff, 0x4f, 0x83, 0x91, 0xa6, 0xa4, 0x0c, 0xa5, 0xb2, 0x5d, 0x23, 0xbe, 0xdd, 0x44, 0xa5, 0x97,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x6a, 0x11, 0x8a, 0x87, 0x45, 0x19, 0xe6, 0x4e, 0x99, 0x63, 0x79, 0x8a, 0x50, 0x3f, 0x1d, 0x35,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdc, 0x43, 0xbe, 0x40, 0xbe, 0x0e, 0x53, 0x71, 0x2f, 0x7e, 0x2b, 0xf5, 0xca, 0x70, 0x72, 0x09,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xcb, 0x9f, 0xce, 0xec, 0x81, 0x28, 0x6c, 0xa3, 0xe9, 0x89, 0xbd, 0x97, 0x9b, 0x0c, 0xb2, 0x84,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x92, 0xbe, 0xed, 0xab, 0x18, 0x95, 0xa9, 0x4f, 0xaa, 0x69, 0xb6, 0x32, 0xe5, 0xcc, 0x47, 0xce,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xb2, 0x6a, 0xeb, 0x18, 0x74, 0xe4, 0x7c, 0xa8, 0x35, 0x8f, 0xf2, 0x23, 0x78, 0xf0, 0x91, 0x44,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x45, 0x92, 0x64, 0xf4, 0x79, 0x8f, 0x6a, 0x78, 0xba, 0xcb, 0x89, 0xc1, 0x5e, 0xd3, 0xd6, 0x01,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x58, 0xc8, 0xe0, 0x0b, 0x26, 0x31, 0x68, 0x6d, 0x54, 0xea, 0xb8, 0x4b, 0x91, 0xf0, 0xac, 0xa1,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x08, 0xa4, 0xe2, 0xef, 0xec, 0x8a, 0x8e, 0x33, 0x12, 0xca, 0x74, 0x60, 0xb9, 0x04, 0x0b, 0xbf,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
}

// GFSbox Know Answer Test Values. Keysize = 256.
unittest
{
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x01, 0x47, 0x30, 0xf8, 0x0a, 0xc6, 0x25, 0xfe, 0x84, 0xf0, 0x26, 0xc6, 0x0b, 0xfd, 0x54, 0x7d,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x5c, 0x9d, 0x84, 0x4e, 0xd4, 0x6f, 0x98, 0x85, 0x08, 0x5e, 0x5d, 0x6a, 0x4f, 0x94, 0xc7, 0xd7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x0b, 0x24, 0xaf, 0x36, 0x19, 0x3c, 0xe4, 0x66, 0x5f, 0x28, 0x25, 0xd7, 0xb4, 0x74, 0x9c, 0x98,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa9, 0xff, 0x75, 0xbd, 0x7c, 0xf6, 0x61, 0x3d, 0x37, 0x31, 0xc7, 0x7c, 0x3b, 0x6d, 0x0c, 0x04,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x76, 0x1c, 0x1f, 0xe4, 0x1a, 0x18, 0xac, 0xf2, 0x0d, 0x24, 0x16, 0x50, 0x61, 0x1d, 0x90, 0xf1,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x62, 0x3a, 0x52, 0xfc, 0xea, 0x5d, 0x44, 0x3e, 0x48, 0xd9, 0x18, 0x1a, 0xb3, 0x2c, 0x74, 0x21,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x8a, 0x56, 0x07, 0x69, 0xd6, 0x05, 0x86, 0x8a, 0xd8, 0x0d, 0x81, 0x9b, 0xdb, 0xa0, 0x37, 0x71,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x38, 0xf2, 0xc7, 0xae, 0x10, 0x61, 0x24, 0x15, 0xd2, 0x7c, 0xa1, 0x90, 0xd2, 0x7d, 0xa8, 0xb4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x91, 0xfb, 0xef, 0x2d, 0x15, 0xa9, 0x78, 0x16, 0x06, 0x0b, 0xee, 0x1f, 0xea, 0xa4, 0x9a, 0xfe,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1b, 0xc7, 0x04, 0xf1, 0xbc, 0xe1, 0x35, 0xce, 0xb8, 0x10, 0x34, 0x1b, 0x21, 0x6d, 0x7a, 0xbe,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
}

// KeySbox Know Answer Test Values. Keysize = 128.
unittest
{
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x10, 0xa5, 0x88, 0x69, 0xd7, 0x4b, 0xe5, 0xa3, 0x74, 0xcf, 0x86, 0x7c, 0xfb, 0x47, 0x38, 0x59,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6d, 0x25, 0x1e, 0x69, 0x44, 0xb0, 0x51, 0xe0, 0x4e, 0xaa, 0x6f, 0xb4, 0xdb, 0xf7, 0x84, 0x65,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xca, 0xea, 0x65, 0xcd, 0xbb, 0x75, 0xe9, 0x16, 0x9e, 0xcd, 0x22, 0xeb, 0xe6, 0xe5, 0x46, 0x75,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6e, 0x29, 0x20, 0x11, 0x90, 0x15, 0x2d, 0xf4, 0xee, 0x05, 0x81, 0x39, 0xde, 0xf6, 0x10, 0xbb,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xa2, 0xe2, 0xfa, 0x9b, 0xaf, 0x7d, 0x20, 0x82, 0x2c, 0xa9, 0xf0, 0x54, 0x2f, 0x76, 0x4a, 0x41,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc3, 0xb4, 0x4b, 0x95, 0xd9, 0xd2, 0xf2, 0x56, 0x70, 0xee, 0xe9, 0xa0, 0xde, 0x09, 0x9f, 0xa3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xb6, 0x36, 0x4a, 0xc4, 0xe1, 0xde, 0x1e, 0x28, 0x5e, 0xaf, 0x14, 0x4a, 0x24, 0x15, 0xf7, 0xa0,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x5d, 0x9b, 0x05, 0x57, 0x8f, 0xc9, 0x44, 0xb3, 0xcf, 0x1c, 0xcf, 0x0e, 0x74, 0x6c, 0xd5, 0x81,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x64, 0xcf, 0x9c, 0x7a, 0xbc, 0x50, 0xb8, 0x88, 0xaf, 0x65, 0xf4, 0x9d, 0x52, 0x19, 0x44, 0xb2,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf7, 0xef, 0xc8, 0x9d, 0x5d, 0xba, 0x57, 0x81, 0x04, 0x01, 0x6c, 0xe5, 0xad, 0x65, 0x9c, 0x05,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x47, 0xd6, 0x74, 0x2e, 0xef, 0xcc, 0x04, 0x65, 0xdc, 0x96, 0x35, 0x5e, 0x85, 0x1b, 0x64, 0xd9,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x03, 0x06, 0x19, 0x4f, 0x66, 0x6d, 0x18, 0x36, 0x24, 0xaa, 0x23, 0x0a, 0x8b, 0x26, 0x4a, 0xe7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x3e, 0xb3, 0x97, 0x90, 0x67, 0x8c, 0x56, 0xbe, 0xe3, 0x4b, 0xbc, 0xde, 0xcc, 0xf6, 0xcd, 0xb5,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x85, 0x80, 0x75, 0xd5, 0x36, 0xd7, 0x9c, 0xce, 0xe5, 0x71, 0xf7, 0xd7, 0x20, 0x4b, 0x1f, 0x67,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x64, 0x11, 0x0a, 0x92, 0x4f, 0x07, 0x43, 0xd5, 0x00, 0xcc, 0xad, 0xae, 0x72, 0xc1, 0x34, 0x27,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x35, 0x87, 0x0c, 0x6a, 0x57, 0xe9, 0xe9, 0x23, 0x14, 0xbc, 0xb8, 0x08, 0x7c, 0xde, 0x72, 0xce,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x18, 0xd8, 0x12, 0x65, 0x16, 0xf8, 0xa1, 0x2a, 0xb1, 0xa3, 0x6d, 0x9f, 0x04, 0xd6, 0x8e, 0x51,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6c, 0x68, 0xe9, 0xbe, 0x5e, 0xc4, 0x1e, 0x22, 0xc8, 0x25, 0xb7, 0xc7, 0xaf, 0xfb, 0x43, 0x63,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xf5, 0x30, 0x35, 0x79, 0x68, 0x57, 0x84, 0x80, 0xb3, 0x98, 0xa3, 0xc2, 0x51, 0xcd, 0x10, 0x93,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf5, 0xdf, 0x39, 0x99, 0x0f, 0xc6, 0x88, 0xf1, 0xb0, 0x72, 0x24, 0xcc, 0x03, 0xe8, 0x6c, 0xea,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xda, 0x84, 0x36, 0x7f, 0x32, 0x5d, 0x42, 0xd6, 0x01, 0xb4, 0x32, 0x69, 0x64, 0x80, 0x2e, 0x8e,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xbb, 0xa0, 0x71, 0xbc, 0xb4, 0x70, 0xf8, 0xf6, 0x58, 0x6e, 0x5d, 0x3a, 0xdd, 0x18, 0xbc, 0x66,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xe3, 0x7b, 0x1c, 0x6a, 0xa2, 0x84, 0x6f, 0x6f, 0xdb, 0x41, 0x3f, 0x23, 0x8b, 0x08, 0x9f, 0x23,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x43, 0xc9, 0xf7, 0xe6, 0x2f, 0x5d, 0x28, 0x8b, 0xb2, 0x7a, 0xa4, 0x0e, 0xf8, 0xfe, 0x1e, 0xa8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x6c, 0x00, 0x2b, 0x68, 0x24, 0x83, 0xe0, 0xca, 0xbc, 0xc7, 0x31, 0xc2, 0x53, 0xbe, 0x56, 0x74,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x35, 0x80, 0xd1, 0x9c, 0xff, 0x44, 0xf1, 0x01, 0x4a, 0x7c, 0x96, 0x6a, 0x69, 0x05, 0x9d, 0xe5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x14, 0x3a, 0xe8, 0xed, 0x65, 0x55, 0xab, 0xa9, 0x61, 0x10, 0xab, 0x58, 0x89, 0x3a, 0x8a, 0xe1,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x80, 0x6d, 0xa8, 0x64, 0xdd, 0x29, 0xd4, 0x8d, 0xea, 0xfb, 0xe7, 0x64, 0xf8, 0x20, 0x2a, 0xef,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xb6, 0x94, 0x18, 0xa8, 0x53, 0x32, 0x24, 0x0d, 0xc8, 0x24, 0x92, 0x35, 0x39, 0x56, 0xae, 0x0c,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa3, 0x03, 0xd9, 0x40, 0xde, 0xd8, 0xf0, 0xba, 0xff, 0x6f, 0x75, 0x41, 0x4c, 0xac, 0x52, 0x43,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x71, 0xb5, 0xc0, 0x8a, 0x19, 0x93, 0xe1, 0x36, 0x2e, 0x4d, 0x0c, 0xe9, 0xb2, 0x2b, 0x78, 0xd5,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc2, 0xda, 0xbd, 0x11, 0x7f, 0x8a, 0x3e, 0xca, 0xbf, 0xbb, 0x11, 0xd1, 0x21, 0x94, 0xd9, 0xd0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xe2, 0x34, 0xcd, 0xca, 0x26, 0x06, 0xb8, 0x1f, 0x29, 0x40, 0x8d, 0x5f, 0x6d, 0xa2, 0x12, 0x06,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xff, 0xf6, 0x0a, 0x47, 0x40, 0x08, 0x6b, 0x3b, 0x9c, 0x56, 0x19, 0x5b, 0x98, 0xd9, 0x1a, 0x7b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x13, 0x23, 0x7c, 0x49, 0x07, 0x4a, 0x3d, 0xa0, 0x78, 0xdc, 0x1d, 0x82, 0x8b, 0xb7, 0x8c, 0x6f,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x81, 0x46, 0xa0, 0x8e, 0x23, 0x57, 0xf0, 0xca, 0xa3, 0x0c, 0xa8, 0xc9, 0x4d, 0x1a, 0x05, 0x44,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x30, 0x71, 0xa2, 0xa4, 0x8f, 0xe6, 0xcb, 0xd0, 0x4f, 0x1a, 0x12, 0x90, 0x98, 0xe3, 0x08, 0xf8,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x4b, 0x98, 0xe0, 0x6d, 0x35, 0x6d, 0xeb, 0x07, 0xeb, 0xb8, 0x24, 0xe5, 0x71, 0x3f, 0x7b, 0xe3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x90, 0xf4, 0x2e, 0xc0, 0xf6, 0x83, 0x85, 0xf2, 0xff, 0xc5, 0xdf, 0xc0, 0x3a, 0x65, 0x4d, 0xce,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7a, 0x20, 0xa5, 0x3d, 0x46, 0x0f, 0xc9, 0xce, 0x04, 0x23, 0xa7, 0xa0, 0x76, 0x4c, 0x6c, 0xf2,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xfe, 0xbd, 0x9a, 0x24, 0xd8, 0xb6, 0x5c, 0x1c, 0x78, 0x7d, 0x50, 0xa4, 0xed, 0x36, 0x19, 0xa9,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf4, 0xa7, 0x0d, 0x8a, 0xf8, 0x77, 0xf9, 0xb0, 0x2b, 0x4c, 0x40, 0xdf, 0x57, 0xd4, 0x5b, 0x17,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
}

// KeySbox Know Answer Test Values. Keysize = 256.
unittest
{
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xc4, 0x7b, 0x02, 0x94, 0xdb, 0xbb, 0xee, 0x0f, 0xec, 0x47, 0x57, 0xf2, 0x2f, 0xfe, 0xee, 0x35,
            0x87, 0xca, 0x47, 0x30, 0xc3, 0xd3, 0x3b, 0x69, 0x1d, 0xf3, 0x8b, 0xab, 0x07, 0x6b, 0xc5, 0x58,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x46, 0xf2, 0xfb, 0x34, 0x2d, 0x6f, 0x0a, 0xb4, 0x77, 0x47, 0x6f, 0xc5, 0x01, 0x24, 0x2c, 0x5f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x28, 0xd4, 0x6c, 0xff, 0xa1, 0x58, 0x53, 0x31, 0x94, 0x21, 0x4a, 0x91, 0xe7, 0x12, 0xfc, 0x2b,
            0x45, 0xb5, 0x18, 0x07, 0x66, 0x75, 0xaf, 0xfd, 0x91, 0x0e, 0xde, 0xca, 0x5f, 0x41, 0xac, 0x64,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x4b, 0xf3, 0xb0, 0xa6, 0x9a, 0xeb, 0x66, 0x57, 0x79, 0x4f, 0x29, 0x01, 0xb1, 0x44, 0x0a, 0xd4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xc1, 0xcc, 0x35, 0x8b, 0x44, 0x99, 0x09, 0xa1, 0x94, 0x36, 0xcf, 0xbb, 0x3f, 0x85, 0x2e, 0xf8,
            0xbc, 0xb5, 0xed, 0x12, 0xac, 0x70, 0x58, 0x32, 0x5f, 0x56, 0xe6, 0x09, 0x9a, 0xab, 0x1a, 0x1c,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x35, 0x20, 0x65, 0x27, 0x21, 0x69, 0xab, 0xf9, 0x85, 0x68, 0x43, 0x92, 0x7d, 0x06, 0x74, 0xfd,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x98, 0x4c, 0xa7, 0x5f, 0x4e, 0xe8, 0xd7, 0x06, 0xf4, 0x6c, 0x2d, 0x98, 0xc0, 0xbf, 0x4a, 0x45,
            0xf5, 0xb0, 0x0d, 0x79, 0x1c, 0x2d, 0xfe, 0xb1, 0x91, 0xb5, 0xed, 0x8e, 0x42, 0x0f, 0xd6, 0x27,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x43, 0x07, 0x45, 0x6a, 0x9e, 0x67, 0x81, 0x3b, 0x45, 0x2e, 0x15, 0xfa, 0x8f, 0xff, 0xe3, 0x98,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xb4, 0x3d, 0x08, 0xa4, 0x47, 0xac, 0x86, 0x09, 0xba, 0xad, 0xae, 0x4f, 0xf1, 0x29, 0x18, 0xb9,
            0xf6, 0x8f, 0xc1, 0x65, 0x3f, 0x12, 0x69, 0x22, 0x2f, 0x12, 0x39, 0x81, 0xde, 0xd7, 0xa9, 0x2f,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x46, 0x63, 0x44, 0x66, 0x07, 0x35, 0x49, 0x89, 0x47, 0x7a, 0x5c, 0x6f, 0x0f, 0x00, 0x7e, 0xf4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x1d, 0x85, 0xa1, 0x81, 0xb5, 0x4c, 0xde, 0x51, 0xf0, 0xe0, 0x98, 0x09, 0x5b, 0x29, 0x62, 0xfd,
            0xc9, 0x3b, 0x51, 0xfe, 0x9b, 0x88, 0x60, 0x2b, 0x3f, 0x54, 0x13, 0x0b, 0xf7, 0x6a, 0x5b, 0xd9,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x53, 0x1c, 0x2c, 0x38, 0x34, 0x45, 0x78, 0xb8, 0x4d, 0x50, 0xb3, 0xc9, 0x17, 0xbb, 0xb6, 0xe1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xdc, 0x0e, 0xba, 0x1f, 0x22, 0x32, 0xa7, 0x87, 0x9d, 0xed, 0x34, 0xed, 0x84, 0x28, 0xee, 0xb8,
            0x76, 0x9b, 0x05, 0x6b, 0xba, 0xf8, 0xad, 0x77, 0xcb, 0x65, 0xc3, 0x54, 0x14, 0x30, 0xb4, 0xcf,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xfc, 0x6a, 0xec, 0x90, 0x63, 0x23, 0x48, 0x00, 0x05, 0xc5, 0x8e, 0x7e, 0x1a, 0xb0, 0x04, 0xad,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xf8, 0xbe, 0x9b, 0xa6, 0x15, 0xc5, 0xa9, 0x52, 0xca, 0xbb, 0xca, 0x24, 0xf6, 0x8f, 0x85, 0x93,
            0x03, 0x96, 0x24, 0xd5, 0x24, 0xc8, 0x16, 0xac, 0xda, 0x2c, 0x91, 0x83, 0xbd, 0x91, 0x7c, 0xb9,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa3, 0x94, 0x4b, 0x95, 0xca, 0x0b, 0x52, 0x04, 0x35, 0x84, 0xef, 0x02, 0x15, 0x19, 0x26, 0xa8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x79, 0x7f, 0x8b, 0x3d, 0x17, 0x6d, 0xac, 0x5b, 0x7e, 0x34, 0xa2, 0xd5, 0x39, 0xc4, 0xef, 0x36,
            0x7a, 0x16, 0xf8, 0x63, 0x5f, 0x62, 0x64, 0x73, 0x75, 0x91, 0xc5, 0xc0, 0x7b, 0xf5, 0x7a, 0x3e,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa7, 0x42, 0x89, 0xfe, 0x73, 0xa4, 0xc1, 0x23, 0xca, 0x18, 0x9e, 0xa1, 0xe1, 0xb4, 0x9a, 0xd5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x68, 0x38, 0xd4, 0x0c, 0xaf, 0x92, 0x77, 0x49, 0xc1, 0x3f, 0x03, 0x29, 0xd3, 0x31, 0xf4, 0x48,
            0xe2, 0x02, 0xc7, 0x3e, 0xf5, 0x2c, 0x5f, 0x73, 0xa3, 0x7c, 0xa6, 0x35, 0xd4, 0xc4, 0x77, 0x07,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb9, 0x1d, 0x4e, 0xa4, 0x48, 0x86, 0x44, 0xb5, 0x6c, 0xf0, 0x81, 0x2f, 0xa7, 0xfc, 0xf5, 0xfc,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xcc, 0xd1, 0xbc, 0x3c, 0x65, 0x9c, 0xd3, 0xc5, 0x9b, 0xc4, 0x37, 0x48, 0x4e, 0x3c, 0x5c, 0x72,
            0x44, 0x41, 0xda, 0x8d, 0x6e, 0x90, 0xce, 0x55, 0x6c, 0xd5, 0x7d, 0x07, 0x52, 0x66, 0x3b, 0xbc,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x30, 0x4f, 0x81, 0xab, 0x61, 0xa8, 0x0c, 0x2e, 0x74, 0x3b, 0x94, 0xd5, 0x00, 0x2a, 0x12, 0x6b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x13, 0x42, 0x8b, 0x5e, 0x4c, 0x00, 0x5e, 0x06, 0x36, 0xdd, 0x33, 0x84, 0x05, 0xd1, 0x73, 0xab,
            0x13, 0x5d, 0xec, 0x2a, 0x25, 0xc2, 0x2c, 0x5d, 0xf0, 0x72, 0x2d, 0x69, 0xdc, 0xc4, 0x38, 0x87,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x64, 0x9a, 0x71, 0x54, 0x53, 0x78, 0xc7, 0x83, 0xe3, 0x68, 0xc9, 0xad, 0xe7, 0x11, 0x4f, 0x6c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x07, 0xeb, 0x03, 0xa0, 0x8d, 0x29, 0x1d, 0x1b, 0x07, 0x40, 0x8b, 0xf3, 0x51, 0x2a, 0xb4, 0x0c,
            0x91, 0x09, 0x7a, 0xc7, 0x74, 0x61, 0xaa, 0xd4, 0xbb, 0x85, 0x96, 0x47, 0xf7, 0x4f, 0x00, 0xee,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x47, 0xcb, 0x03, 0x0d, 0xa2, 0xab, 0x05, 0x1d, 0xfc, 0x6c, 0x4b, 0xf6, 0x91, 0x0d, 0x12, 0xbb,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x90, 0x14, 0x3a, 0xe2, 0x0c, 0xd7, 0x8c, 0x5d, 0x8e, 0xbd, 0xd6, 0xcb, 0x9d, 0xc1, 0x76, 0x24,
            0x27, 0xa9, 0x6c, 0x78, 0xc6, 0x39, 0xbc, 0xcc, 0x41, 0xa6, 0x14, 0x24, 0x56, 0x4e, 0xaf, 0xe1,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x79, 0x8c, 0x7c, 0x00, 0x5d, 0xee, 0x43, 0x2b, 0x2c, 0x8e, 0xa5, 0xdf, 0xa3, 0x81, 0xec, 0xc3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xb7, 0xa5, 0x79, 0x4d, 0x52, 0x73, 0x74, 0x75, 0xd5, 0x3d, 0x5a, 0x37, 0x72, 0x00, 0x84, 0x9b,
            0xe0, 0x26, 0x0a, 0x67, 0xa2, 0xb2, 0x2c, 0xed, 0x8b, 0xbe, 0xf1, 0x28, 0x82, 0x27, 0x0d, 0x07,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x63, 0x7c, 0x31, 0xdc, 0x25, 0x91, 0xa0, 0x76, 0x36, 0xf6, 0x46, 0xb7, 0x2d, 0xaa, 0xbb, 0xe7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xfc, 0xa0, 0x2f, 0x3d, 0x50, 0x11, 0xcf, 0xc5, 0xc1, 0xe2, 0x31, 0x65, 0xd4, 0x13, 0xa0, 0x49,
            0xd4, 0x52, 0x6a, 0x99, 0x18, 0x27, 0x42, 0x4d, 0x89, 0x6f, 0xe3, 0x43, 0x5e, 0x0b, 0xf6, 0x8e,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x17, 0x9a, 0x49, 0xc7, 0x12, 0x15, 0x4b, 0xbf, 0xfb, 0xe6, 0xe7, 0xa8, 0x4a, 0x18, 0xe2, 0x20,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
}

// VarTxt Known Answer Test Values. Keysize = 128.
unittest
{
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3a, 0xd7, 0x8e, 0x72, 0x6c, 0x1e, 0xc0, 0x2b, 0x7e, 0xbf, 0xe9, 0x2b, 0x23, 0xd9, 0xec, 0x34,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xaa, 0xe5, 0x93, 0x9c, 0x8e, 0xfd, 0xf2, 0xf0, 0x4e, 0x60, 0xb9, 0xfe, 0x71, 0x17, 0xb2, 0xc2,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf0, 0x31, 0xd4, 0xd7, 0x4f, 0x5d, 0xcb, 0xf3, 0x9d, 0xaa, 0xf8, 0xca, 0x3a, 0xf6, 0xe5, 0x27,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x96, 0xd9, 0xfd, 0x5c, 0xc4, 0xf0, 0x74, 0x41, 0x72, 0x7d, 0xf0, 0xf3, 0x3e, 0x40, 0x1a, 0x36,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x30, 0xcc, 0xdb, 0x04, 0x46, 0x46, 0xd7, 0xe1, 0xf3, 0xcc, 0xea, 0x3d, 0xca, 0x08, 0xb8, 0xc0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x16, 0xae, 0x4c, 0xe5, 0x04, 0x2a, 0x67, 0xee, 0x8e, 0x17, 0x7b, 0x7c, 0x58, 0x7e, 0xcc, 0x82,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb6, 0xda, 0x0b, 0xb1, 0x1a, 0x23, 0x85, 0x5d, 0x9c, 0x5c, 0xb1, 0xb4, 0xc6, 0x41, 0x2e, 0x0a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdb, 0x4f, 0x1a, 0xa5, 0x30, 0x96, 0x7d, 0x67, 0x32, 0xce, 0x47, 0x15, 0xeb, 0x0e, 0xe2, 0x4b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa8, 0x17, 0x38, 0x25, 0x26, 0x21, 0xdd, 0x18, 0x0a, 0x34, 0xf3, 0x45, 0x5b, 0x4b, 0xaa, 0x2f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x77, 0xe2, 0xb5, 0x08, 0xdb, 0x7f, 0xd8, 0x92, 0x34, 0xca, 0xf7, 0x93, 0x9e, 0xe5, 0x62, 0x1a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb8, 0x49, 0x9c, 0x25, 0x1f, 0x84, 0x42, 0xee, 0x13, 0xf0, 0x93, 0x3b, 0x68, 0x8f, 0xcd, 0x19,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x96, 0x51, 0x35, 0xf8, 0xa8, 0x1f, 0x25, 0xc9, 0xd6, 0x30, 0xb1, 0x75, 0x02, 0xf6, 0x8e, 0x53,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8b, 0x87, 0x14, 0x5a, 0x01, 0xad, 0x1c, 0x6c, 0xed, 0xe9, 0x95, 0xea, 0x36, 0x70, 0x45, 0x4f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8e, 0xae, 0x3b, 0x10, 0xa0, 0xc8, 0xca, 0x6d, 0x1d, 0x3b, 0x0f, 0xa6, 0x1e, 0x56, 0xb0, 0xb2,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x64, 0xb4, 0xd6, 0x29, 0x81, 0x0f, 0xda, 0x6b, 0xaf, 0xdf, 0x08, 0xf3, 0xb0, 0xd8, 0xd2, 0xc5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd7, 0xe5, 0xdb, 0xd3, 0x32, 0x45, 0x95, 0xf8, 0xfd, 0xc7, 0xd7, 0xc5, 0x71, 0xda, 0x6c, 0x2a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf3, 0xf7, 0x23, 0x75, 0x26, 0x4e, 0x16, 0x7f, 0xca, 0x9d, 0xe2, 0xc1, 0x52, 0x7d, 0x96, 0x06,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8e, 0xe7, 0x9d, 0xd4, 0xf4, 0x01, 0xff, 0x9b, 0x7e, 0xa9, 0x45, 0xd8, 0x66, 0x66, 0xc1, 0x3b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdd, 0x35, 0xce, 0xa2, 0x79, 0x99, 0x40, 0xb4, 0x0d, 0xb3, 0xf8, 0x19, 0xcb, 0x94, 0xc0, 0x8b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x69, 0x41, 0xcb, 0x6b, 0x3e, 0x08, 0xc2, 0xb7, 0xaf, 0xa5, 0x81, 0xeb, 0xdd, 0x60, 0x7b, 0x87,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2c, 0x20, 0xf4, 0x39, 0xf6, 0xbb, 0x09, 0x7b, 0x29, 0xb8, 0xbd, 0x6d, 0x99, 0xaa, 0xd7, 0x99,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x62, 0x5d, 0x01, 0xf0, 0x58, 0xe5, 0x65, 0xf7, 0x7a, 0xe8, 0x63, 0x78, 0xbd, 0x2c, 0x49, 0xb3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc0, 0xb5, 0xfd, 0x98, 0x19, 0x0e, 0xf4, 0x5f, 0xbb, 0x43, 0x01, 0x43, 0x8d, 0x09, 0x59, 0x50,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x13, 0x00, 0x1f, 0xf5, 0xd9, 0x98, 0x06, 0xef, 0xd2, 0x5d, 0xa3, 0x4f, 0x56, 0xbe, 0x85, 0x4b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3b, 0x59, 0x4c, 0x60, 0xf5, 0xc8, 0x27, 0x7a, 0x51, 0x13, 0x67, 0x7f, 0x94, 0x20, 0x8d, 0x82,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe9, 0xc0, 0xfc, 0x18, 0x18, 0xe4, 0xaa, 0x46, 0xbd, 0x2e, 0x39, 0xd6, 0x38, 0xf8, 0x9e, 0x05,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf8, 0x02, 0x3e, 0xe9, 0xc3, 0xfd, 0xc4, 0x5a, 0x01, 0x9b, 0x4e, 0x98, 0x5c, 0x7e, 0x1a, 0x54,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x35, 0xf4, 0x01, 0x82, 0xab, 0x46, 0x62, 0xf3, 0x02, 0x3b, 0xae, 0xc1, 0xee, 0x79, 0x6b, 0x57,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3a, 0xeb, 0xba, 0xd7, 0x30, 0x36, 0x49, 0xb4, 0x19, 0x4a, 0x69, 0x45, 0xc6, 0xcc, 0x36, 0x94,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa2, 0x12, 0x4b, 0xea, 0x53, 0xec, 0x28, 0x34, 0x27, 0x9b, 0xed, 0x7f, 0x7e, 0xb0, 0xf9, 0x38,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb9, 0xfb, 0x43, 0x99, 0xfa, 0x4f, 0xac, 0xc7, 0x30, 0x9e, 0x14, 0xec, 0x98, 0x36, 0x0b, 0x0a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc2, 0x62, 0x77, 0x43, 0x74, 0x20, 0xc5, 0xd6, 0x34, 0xf7, 0x15, 0xae, 0xa8, 0x1a, 0x91, 0x32,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x17, 0x1a, 0x0e, 0x1b, 0x2d, 0xd4, 0x24, 0xf0, 0xe0, 0x89, 0xaf, 0x2c, 0x4c, 0x10, 0xf3, 0x2f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7c, 0xad, 0xbe, 0x40, 0x2d, 0x1b, 0x20, 0x8f, 0xe7, 0x35, 0xed, 0xce, 0x00, 0xae, 0xe7, 0xce,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x43, 0xb0, 0x2f, 0xf9, 0x29, 0xa1, 0x48, 0x5a, 0xf6, 0xf5, 0xc6, 0xd6, 0x55, 0x8b, 0xaa, 0x0f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x09, 0x2f, 0xaa, 0xcc, 0x9b, 0xf4, 0x35, 0x08, 0xbf, 0x8f, 0xa8, 0x61, 0x3c, 0xa7, 0x5d, 0xea,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xcb, 0x2b, 0xf8, 0x28, 0x0f, 0x3f, 0x97, 0x42, 0xc7, 0xed, 0x51, 0x3f, 0xe8, 0x02, 0x62, 0x9c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x21, 0x5a, 0x41, 0xee, 0x44, 0x2f, 0xa9, 0x92, 0xa6, 0xe3, 0x23, 0x98, 0x6d, 0xed, 0x3f, 0x68,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf2, 0x1e, 0x99, 0xcf, 0x4f, 0x0f, 0x77, 0xce, 0xa8, 0x36, 0xe1, 0x1a, 0x2f, 0xe7, 0x5f, 0xb1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x95, 0xe3, 0xa0, 0xca, 0x90, 0x79, 0xe6, 0x46, 0x33, 0x1d, 0xf8, 0xb4, 0xe7, 0x0d, 0x2c, 0xd6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x4a, 0xfe, 0x7f, 0x12, 0x0c, 0xe7, 0x61, 0x3f, 0x74, 0xfc, 0x12, 0xa0, 0x1a, 0x82, 0x80, 0x73,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x82, 0x7f, 0x00, 0x0e, 0x75, 0xe2, 0xc8, 0xb9, 0xd4, 0x79, 0xbe, 0xed, 0x91, 0x3f, 0xe6, 0x78,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x35, 0x83, 0x0c, 0x8e, 0x7a, 0xae, 0xfe, 0x2d, 0x30, 0x31, 0x0e, 0xf3, 0x81, 0xcb, 0xf6, 0x91,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x19, 0x1a, 0xa0, 0xf2, 0xc8, 0x57, 0x01, 0x44, 0xf3, 0x86, 0x57, 0xea, 0x40, 0x85, 0xeb, 0xe5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x85, 0x06, 0x2c, 0x2c, 0x90, 0x9f, 0x15, 0xd9, 0x26, 0x9b, 0x6c, 0x18, 0xce, 0x99, 0xc4, 0xf0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x67, 0x80, 0x34, 0xdc, 0x9e, 0x41, 0xb5, 0xa5, 0x60, 0xed, 0x23, 0x9e, 0xea, 0xb1, 0xbc, 0x78,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc2, 0xf9, 0x3a, 0x4c, 0xe5, 0xab, 0x6d, 0x5d, 0x56, 0xf1, 0xb9, 0x3c, 0xf1, 0x99, 0x11, 0xc1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1c, 0x31, 0x12, 0xbc, 0xb0, 0xc1, 0xdc, 0xc7, 0x49, 0xd7, 0x99, 0x74, 0x36, 0x91, 0xbf, 0x82,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x00, 0xc5, 0x5b, 0xd7, 0x5c, 0x7f, 0x9c, 0x88, 0x19, 0x89, 0xd3, 0xec, 0x19, 0x11, 0xc0, 0xd4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xea, 0x2e, 0x6b, 0x5e, 0xf1, 0x82, 0xb7, 0xdf, 0xf3, 0x62, 0x9a, 0xbd, 0x6a, 0x12, 0x04, 0x5f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x22, 0x32, 0x23, 0x27, 0xe0, 0x17, 0x80, 0xb1, 0x73, 0x97, 0xf2, 0x40, 0x87, 0xf8, 0xcc, 0x6f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc9, 0xca, 0xcb, 0x5c, 0xd1, 0x16, 0x92, 0xc3, 0x73, 0xb2, 0x41, 0x17, 0x68, 0x14, 0x9e, 0xe7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa1, 0x8e, 0x3d, 0xbb, 0xca, 0x57, 0x78, 0x60, 0xda, 0xb6, 0xb8, 0x0d, 0xa3, 0x13, 0x92, 0x56,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x79, 0xb6, 0x1c, 0x37, 0xbf, 0x32, 0x8e, 0xcc, 0xa8, 0xd7, 0x43, 0x26, 0x5a, 0x3d, 0x42, 0x5c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd2, 0xd9, 0x9c, 0x6b, 0xcc, 0x1f, 0x06, 0xfd, 0xa8, 0xe2, 0x7e, 0x8a, 0xe3, 0xf1, 0xcc, 0xc7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1b, 0xfd, 0x4b, 0x91, 0xc7, 0x01, 0xfd, 0x6b, 0x61, 0xb7, 0xf9, 0x97, 0x82, 0x9d, 0x66, 0x3b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x11, 0x00, 0x5d, 0x52, 0xf2, 0x5f, 0x16, 0xbd, 0xc9, 0x54, 0x5a, 0x87, 0x6a, 0x63, 0x49, 0x0a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3a, 0x4d, 0x35, 0x4f, 0x02, 0xbb, 0x5a, 0x5e, 0x47, 0xd3, 0x96, 0x66, 0x86, 0x7f, 0x24, 0x6a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd4, 0x51, 0xb8, 0xd6, 0xe1, 0xe1, 0xa0, 0xeb, 0xb1, 0x55, 0xfb, 0xbf, 0x6e, 0x7b, 0x7d, 0xc3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x68, 0x98, 0xd4, 0xf4, 0x2f, 0xa7, 0xba, 0x6a, 0x10, 0xac, 0x05, 0xe8, 0x7b, 0x9f, 0x20, 0x80,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb6, 0x11, 0x29, 0x5e, 0x73, 0x9c, 0xa7, 0xd9, 0xb5, 0x0f, 0x8e, 0x4c, 0x0e, 0x75, 0x4a, 0x3f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7d, 0x33, 0xfc, 0x7d, 0x8a, 0xbe, 0x3c, 0xa1, 0x93, 0x67, 0x59, 0xf8, 0xf5, 0xde, 0xaf, 0x20,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3b, 0x5e, 0x0f, 0x56, 0x6d, 0xc9, 0x6c, 0x29, 0x8f, 0x0c, 0x12, 0x63, 0x75, 0x39, 0xb2, 0x5c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf8, 0x07, 0xc3, 0xe7, 0x98, 0x5f, 0xe0, 0xf5, 0xa5, 0x0e, 0x2c, 0xdb, 0x25, 0xc5, 0x10, 0x9e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x41, 0xf9, 0x92, 0xa8, 0x56, 0xfb, 0x27, 0x8b, 0x38, 0x9a, 0x62, 0xf5, 0xd2, 0x74, 0xd7, 0xe9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x10, 0xd3, 0xed, 0x7a, 0x6f, 0xe1, 0x5a, 0xb4, 0xd9, 0x1a, 0xcb, 0xc7, 0xd0, 0x76, 0x7a, 0xb1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x21, 0xfe, 0xec, 0xd4, 0x5b, 0x2e, 0x67, 0x59, 0x73, 0xac, 0x33, 0xbf, 0x0c, 0x54, 0x24, 0xfc,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x14, 0x80, 0xcb, 0x39, 0x55, 0xba, 0x62, 0xd0, 0x9e, 0xea, 0x66, 0x8f, 0x7c, 0x70, 0x88, 0x17,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x66, 0x40, 0x40, 0x33, 0xd6, 0xb7, 0x2b, 0x60, 0x93, 0x54, 0xd5, 0x49, 0x6e, 0x7e, 0xb5, 0x11,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1c, 0x31, 0x7a, 0x22, 0x0a, 0x7d, 0x70, 0x0d, 0xa2, 0xb1, 0xe0, 0x75, 0xb0, 0x02, 0x66, 0xe1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xab, 0x3b, 0x89, 0x54, 0x22, 0x33, 0xf1, 0x27, 0x1b, 0xf8, 0xfd, 0x0c, 0x0f, 0x40, 0x35, 0x45,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd9, 0x3e, 0xae, 0x96, 0x6f, 0xac, 0x46, 0xdc, 0xa9, 0x27, 0xd6, 0xb1, 0x14, 0xfa, 0x3f, 0x9e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1b, 0xde, 0xc5, 0x21, 0x31, 0x65, 0x03, 0xd9, 0xd5, 0xee, 0x65, 0xdf, 0x3e, 0xa9, 0x4d, 0xdf,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xee, 0xf4, 0x56, 0x43, 0x1d, 0xea, 0x8b, 0x4a, 0xcf, 0x83, 0xbd, 0xae, 0x37, 0x17, 0xf7, 0x5f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x06, 0xf2, 0x51, 0x9a, 0x2f, 0xaf, 0xaa, 0x59, 0x6b, 0xfe, 0xf5, 0xcf, 0xa1, 0x5c, 0x21, 0xb9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x25, 0x1a, 0x7e, 0xac, 0x7e, 0x2f, 0xe8, 0x09, 0xe4, 0xaa, 0x8d, 0x0d, 0x70, 0x12, 0x53, 0x1a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3b, 0xff, 0xc1, 0x6e, 0x4c, 0x49, 0xb2, 0x68, 0xa2, 0x0f, 0x8d, 0x96, 0xa6, 0x0b, 0x40, 0x58,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe8, 0x86, 0xf9, 0x28, 0x19, 0x99, 0xc5, 0xbb, 0x3b, 0x3e, 0x88, 0x62, 0xe2, 0xf7, 0xc9, 0x88,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x56, 0x3b, 0xf9, 0x0d, 0x61, 0xbe, 0xef, 0x39, 0xf4, 0x8d, 0xd6, 0x25, 0xfc, 0xef, 0x13, 0x61,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x4d, 0x37, 0xc8, 0x50, 0x64, 0x45, 0x63, 0xc6, 0x9f, 0xd0, 0xac, 0xd9, 0xa0, 0x49, 0x32, 0x5b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb8, 0x7c, 0x92, 0x1b, 0x91, 0x82, 0x9e, 0xf3, 0xb1, 0x3c, 0xa5, 0x41, 0xee, 0x11, 0x30, 0xa6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2e, 0x65, 0xeb, 0x6b, 0x6e, 0xa3, 0x83, 0xe1, 0x09, 0xac, 0xcc, 0xe8, 0x32, 0x6b, 0x03, 0x93,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9c, 0xa5, 0x47, 0xf7, 0x43, 0x9e, 0xdc, 0x3e, 0x25, 0x5c, 0x0f, 0x4d, 0x49, 0xaa, 0x89, 0x90,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa5, 0xe6, 0x52, 0x61, 0x4c, 0x93, 0x00, 0xf3, 0x78, 0x16, 0xb1, 0xf9, 0xfd, 0x0c, 0x87, 0xf9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x14, 0x95, 0x4f, 0x0b, 0x46, 0x97, 0x77, 0x6f, 0x44, 0x49, 0x4f, 0xe4, 0x58, 0xd8, 0x14, 0xed,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7c, 0x8d, 0x9a, 0xb6, 0xc2, 0x76, 0x17, 0x23, 0xfe, 0x42, 0xf8, 0xbb, 0x50, 0x6c, 0xbc, 0xf7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdb, 0x7e, 0x19, 0x32, 0x67, 0x9f, 0xdd, 0x99, 0x74, 0x2a, 0xab, 0x04, 0xaa, 0x0d, 0x5a, 0x80,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x4c, 0x6a, 0x1c, 0x83, 0xe5, 0x68, 0xcd, 0x10, 0xf2, 0x7c, 0x2d, 0x73, 0xde, 0xd1, 0x9c, 0x28,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x90, 0xec, 0xbe, 0x61, 0x77, 0xe6, 0x74, 0xc9, 0x8d, 0xe4, 0x12, 0x41, 0x3f, 0x7a, 0xc9, 0x15,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x90, 0x68, 0x4a, 0x2a, 0xc5, 0x5f, 0xe1, 0xec, 0x2b, 0x8e, 0xbd, 0x56, 0x22, 0x52, 0x0b, 0x73,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x74, 0x72, 0xf9, 0xa7, 0x98, 0x86, 0x07, 0xca, 0x79, 0x70, 0x77, 0x95, 0x99, 0x10, 0x35, 0xe6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x56, 0xaf, 0xf0, 0x89, 0x87, 0x8b, 0xf3, 0x35, 0x2f, 0x8d, 0xf1, 0x72, 0xa3, 0xae, 0x47, 0xd8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x65, 0xc0, 0x52, 0x6c, 0xbe, 0x40, 0x16, 0x1b, 0x80, 0x19, 0xa2, 0xa3, 0x17, 0x1a, 0xbd, 0x23,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x37, 0x7b, 0xe0, 0xbe, 0x33, 0xb4, 0xe3, 0xe3, 0x10, 0xb4, 0xaa, 0xbd, 0xa1, 0x73, 0xf8, 0x4f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x94, 0x02, 0xe9, 0xaa, 0x6f, 0x69, 0xde, 0x65, 0x04, 0xda, 0x8d, 0x20, 0xc4, 0xfc, 0xaa, 0x2f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x12, 0x3c, 0x1f, 0x4a, 0xf3, 0x13, 0xad, 0x8c, 0x2c, 0xe6, 0x48, 0xb2, 0xe7, 0x1f, 0xb6, 0xe1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1f, 0xfc, 0x62, 0x6d, 0x30, 0x20, 0x3d, 0xcd, 0xb0, 0x01, 0x9f, 0xb8, 0x0f, 0x72, 0x6c, 0xf4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x76, 0xda, 0x1f, 0xbe, 0x3a, 0x50, 0x72, 0x8c, 0x50, 0xfd, 0x2e, 0x62, 0x1b, 0x5a, 0xd8, 0x85,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x08, 0x2e, 0xb8, 0xbe, 0x35, 0xf4, 0x42, 0xfb, 0x52, 0x66, 0x8e, 0x16, 0xa5, 0x91, 0xd1, 0xd6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe6, 0x56, 0xf9, 0xec, 0xf5, 0xfe, 0x27, 0xec, 0x3e, 0x4a, 0x73, 0xd0, 0x0c, 0x28, 0x2f, 0xb3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2c, 0xa8, 0x20, 0x9d, 0x63, 0x27, 0x4c, 0xd9, 0xa2, 0x9b, 0xb7, 0x4b, 0xcd, 0x77, 0x68, 0x3a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x79, 0xbf, 0x5d, 0xce, 0x14, 0xbb, 0x7d, 0xd7, 0x3a, 0x8e, 0x36, 0x11, 0xde, 0x7c, 0xe0, 0x26,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3c, 0x84, 0x99, 0x39, 0xa5, 0xd2, 0x93, 0x99, 0xf3, 0x44, 0xc4, 0xa0, 0xec, 0xa8, 0xa5, 0x76,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xed, 0x3c, 0x0a, 0x94, 0xd5, 0x9b, 0xec, 0xe9, 0x88, 0x35, 0xda, 0x7a, 0xa4, 0xf0, 0x7c, 0xa2,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x63, 0x91, 0x9e, 0xd4, 0xce, 0x10, 0x19, 0x64, 0x38, 0xb6, 0xad, 0x09, 0xd9, 0x9c, 0xd7, 0x95,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x76, 0x78, 0xf3, 0xa8, 0x33, 0xf1, 0x9f, 0xea, 0x95, 0xf3, 0xc6, 0x02, 0x9e, 0x2b, 0xc6, 0x10,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3a, 0xa4, 0x26, 0x83, 0x10, 0x67, 0xd3, 0x6b, 0x92, 0xbe, 0x7c, 0x5f, 0x81, 0xc1, 0x3c, 0x56,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x92, 0x72, 0xe2, 0xd2, 0xcd, 0xd1, 0x10, 0x50, 0x99, 0x8c, 0x84, 0x50, 0x77, 0xa3, 0x0e, 0xa0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x08, 0x8c, 0x4b, 0x53, 0xf5, 0xec, 0x0f, 0xf8, 0x14, 0xc1, 0x9a, 0xda, 0xe7, 0xf6, 0x24, 0x6c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x40, 0x10, 0xa5, 0xe4, 0x01, 0xfd, 0xf0, 0xa0, 0x35, 0x4d, 0xdb, 0xcc, 0x0d, 0x01, 0x2b, 0x17,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa8, 0x7a, 0x38, 0x57, 0x36, 0xc0, 0xa6, 0x18, 0x9b, 0xd6, 0x58, 0x9b, 0xd8, 0x44, 0x5a, 0x93,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x54, 0x5f, 0x2b, 0x83, 0xd9, 0x61, 0x6d, 0xcc, 0xf6, 0x0f, 0xa9, 0x83, 0x0e, 0x9c, 0xd2, 0x87,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x4b, 0x70, 0x6f, 0x7f, 0x92, 0x40, 0x63, 0x52, 0x39, 0x40, 0x37, 0xa6, 0xd4, 0xf4, 0x68, 0x8d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb7, 0x97, 0x2b, 0x39, 0x41, 0xc4, 0x4b, 0x90, 0xaf, 0xa7, 0xb2, 0x64, 0xbf, 0xba, 0x73, 0x87,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6f, 0x45, 0x73, 0x2c, 0xf1, 0x08, 0x81, 0x54, 0x6f, 0x0f, 0xd2, 0x38, 0x96, 0xd2, 0xbb, 0x60,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2e, 0x35, 0x79, 0xca, 0x15, 0xaf, 0x27, 0xf6, 0x4b, 0x3c, 0x95, 0x5a, 0x5b, 0xfc, 0x30, 0xba,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x34, 0xa2, 0xc5, 0xa9, 0x1a, 0xe2, 0xae, 0xc9, 0x9b, 0x7d, 0x1b, 0x5f, 0xa6, 0x78, 0x04, 0x47,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa4, 0xd6, 0x61, 0x6b, 0xd0, 0x4f, 0x87, 0x33, 0x5b, 0x0e, 0x53, 0x35, 0x12, 0x27, 0xa9, 0xee,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7f, 0x69, 0x2b, 0x03, 0x94, 0x58, 0x67, 0xd1, 0x61, 0x79, 0xa8, 0xce, 0xfc, 0x83, 0xea, 0x3f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3b, 0xd1, 0x41, 0xee, 0x84, 0xa0, 0xe6, 0x41, 0x4a, 0x26, 0xe7, 0xa4, 0xf2, 0x81, 0xf8, 0xa2,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd1, 0x78, 0x8f, 0x57, 0x2d, 0x98, 0xb2, 0xb1, 0x6e, 0xc5, 0xd5, 0xf3, 0x92, 0x2b, 0x99, 0xbc,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x08, 0x33, 0xff, 0x6f, 0x61, 0xd9, 0x8a, 0x57, 0xb2, 0x88, 0xe8, 0xc3, 0x58, 0x6b, 0x85, 0xa6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x85, 0x68, 0x26, 0x17, 0x97, 0xde, 0x17, 0x6b, 0xf0, 0xb4, 0x3b, 0xec, 0xc6, 0x28, 0x5a, 0xfb,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf9, 0xb0, 0xfd, 0xa0, 0xc4, 0xa8, 0x98, 0xf5, 0xb9, 0xe6, 0xf6, 0x61, 0xc4, 0xce, 0x4d, 0x07,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8a, 0xde, 0x89, 0x59, 0x13, 0x68, 0x5c, 0x67, 0xc5, 0x26, 0x9f, 0x8a, 0xae, 0x42, 0x98, 0x3e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x39, 0xbd, 0xe6, 0x7d, 0x5c, 0x8e, 0xd8, 0xa8, 0xb1, 0xc3, 0x7e, 0xb8, 0xfa, 0x9f, 0x5a, 0xc0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x5c, 0x00, 0x5e, 0x72, 0xc1, 0x41, 0x8c, 0x44, 0xf5, 0x69, 0xf2, 0xea, 0x33, 0xba, 0x54, 0xf3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3f, 0x5b, 0x8c, 0xc9, 0xea, 0x85, 0x5a, 0x0a, 0xfa, 0x73, 0x47, 0xd2, 0x3e, 0x8d, 0x66, 0x4e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
}

// VarTxt Known Answer Test Values. Keysize = 256.
unittest
{
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdd, 0xc6, 0xbf, 0x79, 0x0c, 0x15, 0x76, 0x0d, 0x8d, 0x9a, 0xeb, 0x6f, 0x9a, 0x75, 0xfd, 0x4e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x0a, 0x6b, 0xdc, 0x6d, 0x4c, 0x1e, 0x62, 0x80, 0x30, 0x1f, 0xd8, 0xe9, 0x7d, 0xdb, 0xe6, 0x01,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9b, 0x80, 0xee, 0xfb, 0x7e, 0xbe, 0x2d, 0x2b, 0x16, 0x24, 0x7a, 0xa0, 0xef, 0xc7, 0x2f, 0x5d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7f, 0x2c, 0x5e, 0xce, 0x07, 0xa9, 0x8d, 0x8b, 0xee, 0x13, 0xc5, 0x11, 0x77, 0x39, 0x5f, 0xf7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x78, 0x18, 0xd8, 0x00, 0xdc, 0xf6, 0xf4, 0xbe, 0x1e, 0x0e, 0x94, 0xf4, 0x03, 0xd1, 0xe4, 0xc2,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe7, 0x4c, 0xd1, 0xc9, 0x2f, 0x09, 0x19, 0xc3, 0x5a, 0x03, 0x24, 0x12, 0x3d, 0x61, 0x77, 0xd3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x80, 0x92, 0xa4, 0xdc, 0xf2, 0xda, 0x7e, 0x77, 0xe9, 0x3b, 0xdd, 0x37, 0x1d, 0xfe, 0xd8, 0x2e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x49, 0xaf, 0x6b, 0x37, 0x21, 0x35, 0xac, 0xef, 0x10, 0x13, 0x2e, 0x54, 0x8f, 0x21, 0x7b, 0x17,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8b, 0xcd, 0x40, 0xf9, 0x4e, 0xbb, 0x63, 0xb9, 0xf7, 0x90, 0x96, 0x76, 0xe6, 0x67, 0xf1, 0xe7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xfe, 0x1c, 0xff, 0xb8, 0x3f, 0x45, 0xdc, 0xfb, 0x38, 0xb2, 0x9b, 0xe4, 0x38, 0xdb, 0xd3, 0xab,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x0d, 0xc5, 0x8a, 0x8d, 0x88, 0x66, 0x23, 0x70, 0x5a, 0xec, 0x15, 0xcb, 0x1e, 0x70, 0xdc, 0x0e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc2, 0x18, 0xfa, 0xa1, 0x60, 0x56, 0xbd, 0x07, 0x74, 0xc3, 0xe8, 0xd7, 0x9c, 0x35, 0xa5, 0xe4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x04, 0x7b, 0xba, 0x83, 0xf7, 0xaa, 0x84, 0x17, 0x31, 0x50, 0x4e, 0x01, 0x22, 0x08, 0xfc, 0x9e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdc, 0x8f, 0x0e, 0x49, 0x15, 0xfd, 0x81, 0xba, 0x70, 0xa3, 0x31, 0x31, 0x08, 0x82, 0xf6, 0xda,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x15, 0x69, 0x85, 0x9e, 0xa6, 0xb7, 0x20, 0x6c, 0x30, 0xbf, 0x4f, 0xd0, 0xcb, 0xfa, 0xc3, 0x3c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x30, 0x0a, 0xde, 0x92, 0xf8, 0x8f, 0x48, 0xfa, 0x2d, 0xf7, 0x30, 0xec, 0x16, 0xef, 0x44, 0xcd,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1f, 0xe6, 0xcc, 0x3c, 0x05, 0x96, 0x5d, 0xc0, 0x8e, 0xb0, 0x59, 0x0c, 0x95, 0xac, 0x71, 0xd0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x59, 0xe8, 0x58, 0xea, 0xaa, 0x97, 0xfe, 0xc3, 0x81, 0x11, 0x27, 0x5b, 0x6c, 0xf5, 0xab, 0xc0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x22, 0x39, 0x45, 0x5e, 0x7a, 0xfe, 0x3b, 0x06, 0x16, 0x10, 0x02, 0x88, 0xcc, 0x5a, 0x72, 0x3b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3e, 0xe5, 0x00, 0xc5, 0xc8, 0xd6, 0x34, 0x79, 0x71, 0x71, 0x63, 0xe5, 0x5c, 0x5c, 0x45, 0x22,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd5, 0xe3, 0x8b, 0xf1, 0x5f, 0x16, 0xd9, 0x0e, 0x3e, 0x21, 0x40, 0x41, 0xd7, 0x74, 0xda, 0xa8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb1, 0xf4, 0x06, 0x6e, 0x6f, 0x4f, 0x18, 0x7d, 0xfe, 0x5f, 0x2a, 0xd1, 0xb1, 0x78, 0x19, 0xd0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6e, 0xf4, 0xcc, 0x4d, 0xe4, 0x9b, 0x11, 0x06, 0x5d, 0x7a, 0xf2, 0x90, 0x98, 0x54, 0x79, 0x4a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xac, 0x86, 0xbc, 0x60, 0x6b, 0x66, 0x40, 0xc3, 0x09, 0xe7, 0x82, 0xf2, 0x32, 0xbf, 0x36, 0x7f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x36, 0xaf, 0xf0, 0xef, 0x7b, 0xf3, 0x28, 0x07, 0x72, 0xcf, 0x4c, 0xac, 0x80, 0xa0, 0xd2, 0xb2,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1f, 0x8e, 0xed, 0xea, 0x0f, 0x62, 0xa1, 0x40, 0x6d, 0x58, 0xcf, 0xc3, 0xec, 0xea, 0x72, 0xcf,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xab, 0xf4, 0x15, 0x4a, 0x33, 0x75, 0xa1, 0xd3, 0xe6, 0xb1, 0xd4, 0x54, 0x43, 0x8f, 0x95, 0xa6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x96, 0xf9, 0x6e, 0x9d, 0x60, 0x7f, 0x66, 0x15, 0xfc, 0x19, 0x20, 0x61, 0xee, 0x64, 0x8b, 0x07,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xcf, 0x37, 0xcd, 0xaa, 0xa0, 0xd2, 0xd5, 0x36, 0xc7, 0x18, 0x57, 0x63, 0x4c, 0x79, 0x20, 0x64,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xfb, 0xd6, 0x64, 0x0c, 0x80, 0x24, 0x5c, 0x2b, 0x80, 0x53, 0x73, 0xf1, 0x30, 0x70, 0x31, 0x27,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8d, 0x6a, 0x8a, 0xfe, 0x55, 0xa6, 0xe4, 0x81, 0xba, 0xda, 0xe0, 0xd1, 0x46, 0xf4, 0x36, 0xdb,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6a, 0x49, 0x81, 0xf2, 0x91, 0x5e, 0x3e, 0x68, 0xaf, 0x6c, 0x22, 0x38, 0x5d, 0xd0, 0x67, 0x56,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x42, 0xa1, 0x13, 0x6e, 0x5f, 0x8d, 0x8d, 0x21, 0xd3, 0x10, 0x19, 0x98, 0x64, 0x2d, 0x57, 0x3b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9b, 0x47, 0x15, 0x96, 0xdc, 0x69, 0xae, 0x15, 0x86, 0xce, 0xe6, 0x15, 0x8b, 0x0b, 0x01, 0x81,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x75, 0x36, 0x65, 0xc4, 0xaf, 0x1e, 0xff, 0x33, 0xaa, 0x8b, 0x62, 0x8b, 0xf8, 0x74, 0x1c, 0xfd,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9a, 0x68, 0x2a, 0xcf, 0x40, 0xbe, 0x01, 0xf5, 0xb2, 0xa4, 0x19, 0x3c, 0x9a, 0x82, 0x40, 0x4d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x54, 0xfa, 0xfe, 0x26, 0xe4, 0x28, 0x7f, 0x17, 0xd1, 0x93, 0x5f, 0x87, 0xeb, 0x9a, 0xde, 0x01,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x49, 0xd5, 0x41, 0xb2, 0xe7, 0x4c, 0xfe, 0x73, 0xe6, 0xa8, 0xe8, 0x22, 0x5f, 0x7b, 0xd4, 0x49,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x11, 0xa4, 0x55, 0x30, 0xf6, 0x24, 0xff, 0x6f, 0x76, 0xa1, 0xb3, 0x82, 0x66, 0x26, 0xff, 0x7b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf9, 0x6b, 0x0c, 0x4a, 0x8b, 0xc6, 0xc8, 0x61, 0x30, 0x28, 0x9f, 0x60, 0xb4, 0x3b, 0x8f, 0xba,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x48, 0xc7, 0xd0, 0xe8, 0x08, 0x34, 0xeb, 0xdc, 0x35, 0xb6, 0x73, 0x5f, 0x76, 0xb4, 0x6c, 0x8b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x24, 0x63, 0x53, 0x1a, 0xb5, 0x4d, 0x66, 0x95, 0x5e, 0x73, 0xed, 0xc4, 0xcb, 0x8e, 0xaa, 0x45,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xac, 0x9b, 0xd8, 0xe2, 0x53, 0x04, 0x69, 0x13, 0x4b, 0x9d, 0x5b, 0x06, 0x5d, 0x4f, 0x56, 0x5b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3f, 0x5f, 0x91, 0x06, 0xd0, 0xe5, 0x2f, 0x97, 0x3d, 0x48, 0x90, 0xe6, 0xf3, 0x7e, 0x8a, 0x00,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x20, 0xeb, 0xc8, 0x6f, 0x13, 0x04, 0xd2, 0x72, 0xe2, 0xe2, 0x07, 0xe5, 0x9d, 0xb6, 0x39, 0xf0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe6, 0x7a, 0xe6, 0x42, 0x6b, 0xf9, 0x52, 0x6c, 0x97, 0x2c, 0xff, 0x07, 0x2b, 0x52, 0x25, 0x2c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1a, 0x51, 0x8d, 0xdd, 0xaf, 0x9e, 0xfa, 0x0d, 0x00, 0x2c, 0xc5, 0x8d, 0x10, 0x7e, 0xdf, 0xc8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xea, 0xd7, 0x31, 0xaf, 0x4d, 0x3a, 0x2f, 0xe3, 0xb3, 0x4b, 0xed, 0x04, 0x79, 0x42, 0xa4, 0x9f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb1, 0xd4, 0xef, 0xe4, 0x02, 0x42, 0xf8, 0x3e, 0x93, 0xb6, 0xc8, 0xd7, 0xef, 0xb5, 0xea, 0xe9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xcd, 0x2b, 0x1f, 0xec, 0x11, 0xfd, 0x90, 0x6c, 0x5c, 0x76, 0x30, 0x09, 0x94, 0x43, 0x61, 0x0a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa1, 0x85, 0x3f, 0xe4, 0x7f, 0xe2, 0x92, 0x89, 0xd1, 0x53, 0x16, 0x1d, 0x06, 0x38, 0x7d, 0x21,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x46, 0x32, 0x15, 0x41, 0x79, 0xa5, 0x55, 0xc1, 0x7e, 0xa6, 0x04, 0xd0, 0x88, 0x9f, 0xab, 0x14,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdd, 0x27, 0xca, 0xc6, 0x40, 0x1a, 0x02, 0x2e, 0x8f, 0x38, 0xf9, 0xf9, 0x3e, 0x77, 0x44, 0x17,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc0, 0x90, 0x31, 0x3e, 0xb9, 0x86, 0x74, 0xf3, 0x5f, 0x31, 0x23, 0x38, 0x5f, 0xb9, 0x5d, 0x4d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xcc, 0x35, 0x26, 0x26, 0x2b, 0x92, 0xf0, 0x2e, 0xdc, 0xe5, 0x48, 0xf7, 0x16, 0xb9, 0xf4, 0x5c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc0, 0x83, 0x8d, 0x1a, 0x2b, 0x16, 0xa7, 0xc7, 0xf0, 0xdf, 0xcc, 0x43, 0x3c, 0x39, 0x9c, 0x33,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x0d, 0x9a, 0xc7, 0x56, 0xeb, 0x29, 0x76, 0x95, 0xee, 0xd4, 0xd3, 0x82, 0xeb, 0x12, 0x6d, 0x26,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x56, 0xed, 0xe9, 0xdd, 0xa3, 0xf6, 0xf1, 0x41, 0xbf, 0xf1, 0x75, 0x7f, 0xa6, 0x89, 0xc3, 0xe1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x76, 0x8f, 0x52, 0x0e, 0xfe, 0x0f, 0x23, 0xe6, 0x1d, 0x3e, 0xc8, 0xad, 0x9c, 0xe9, 0x17, 0x74,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb1, 0x14, 0x4d, 0xdf, 0xa7, 0x57, 0x55, 0x21, 0x33, 0x90, 0xe7, 0xc5, 0x96, 0x66, 0x04, 0x90,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1d, 0x7c, 0x0c, 0x40, 0x40, 0xb3, 0x55, 0xb9, 0xd1, 0x07, 0xa9, 0x93, 0x25, 0xe3, 0xb0, 0x50,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd8, 0xe2, 0xbb, 0x1a, 0xe8, 0xee, 0x3d, 0xcf, 0x5b, 0xf7, 0xd6, 0xc3, 0x8d, 0xa8, 0x2a, 0x1a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xfa, 0xf8, 0x2d, 0x17, 0x8a, 0xf2, 0x5a, 0x98, 0x86, 0xa4, 0x7e, 0x7f, 0x78, 0x9b, 0x98, 0xd7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9b, 0x58, 0xdb, 0xfd, 0x77, 0xfe, 0x5a, 0xca, 0x9c, 0xfc, 0x19, 0x0c, 0xd1, 0xb8, 0x2d, 0x19,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x77, 0xf3, 0x92, 0x08, 0x90, 0x42, 0xe4, 0x78, 0xac, 0x16, 0xc0, 0xc8, 0x6a, 0x0b, 0x5d, 0xb5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x19, 0xf0, 0x8e, 0x34, 0x20, 0xee, 0x69, 0xb4, 0x77, 0xca, 0x14, 0x20, 0x28, 0x1c, 0x47, 0x82,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa1, 0xb1, 0x9b, 0xee, 0xe4, 0xe1, 0x17, 0x13, 0x9f, 0x74, 0xb3, 0xc5, 0x3f, 0xdc, 0xb8, 0x75,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa3, 0x7a, 0x58, 0x69, 0xb2, 0x18, 0xa9, 0xf3, 0xa0, 0x86, 0x8d, 0x19, 0xae, 0xa0, 0xad, 0x6a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xbc, 0x35, 0x94, 0xe8, 0x65, 0xbc, 0xd0, 0x26, 0x1b, 0x13, 0x20, 0x27, 0x31, 0xf3, 0x35, 0x80,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x81, 0x14, 0x41, 0xce, 0x1d, 0x30, 0x9e, 0xee, 0x71, 0x85, 0xe8, 0xc7, 0x52, 0xc0, 0x75, 0x57,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x95, 0x99, 0x71, 0xce, 0x41, 0x34, 0x19, 0x05, 0x63, 0x51, 0x8e, 0x70, 0x0b, 0x98, 0x74, 0xd1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x76, 0xb5, 0x61, 0x4a, 0x04, 0x27, 0x07, 0xc9, 0x8e, 0x21, 0x32, 0xe2, 0xe8, 0x05, 0xfe, 0x63,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7d, 0x9f, 0xa6, 0xa5, 0x75, 0x30, 0xd0, 0xf0, 0x36, 0xfe, 0xc3, 0x1c, 0x23, 0x0b, 0x0c, 0xc6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x96, 0x41, 0x53, 0xa8, 0x3b, 0xf6, 0x98, 0x9a, 0x4b, 0xa8, 0x0d, 0xaa, 0x91, 0xc3, 0xe0, 0x81,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa0, 0x13, 0x01, 0x4d, 0x4c, 0xe8, 0x05, 0x4c, 0xf2, 0x59, 0x1d, 0x06, 0xf6, 0xf2, 0xf1, 0x76,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd1, 0xc5, 0xf6, 0x39, 0x9b, 0xf3, 0x82, 0x50, 0x2e, 0x38, 0x5e, 0xee, 0x14, 0x74, 0xa8, 0x69,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x00, 0x07, 0xe2, 0x0b, 0x82, 0x98, 0xec, 0x35, 0x4f, 0x0f, 0x5f, 0xe7, 0x47, 0x0f, 0x36, 0xbd,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb9, 0x5b, 0xa0, 0x5b, 0x33, 0x2d, 0xa6, 0x1e, 0xf6, 0x3a, 0x2b, 0x31, 0xfc, 0xad, 0x98, 0x79,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x46, 0x20, 0xa4, 0x9b, 0xd9, 0x67, 0x49, 0x15, 0x61, 0x66, 0x9a, 0xb2, 0x5d, 0xce, 0x45, 0xf4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x12, 0xe7, 0x12, 0x14, 0xae, 0x8e, 0x04, 0xf0, 0xbb, 0x63, 0xd7, 0x42, 0x5c, 0x6f, 0x14, 0xd5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x4c, 0xc4, 0x2f, 0xc1, 0x40, 0x7b, 0x00, 0x8f, 0xe3, 0x50, 0x90, 0x7c, 0x09, 0x2e, 0x80, 0xac,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x08, 0xb2, 0x44, 0xce, 0x7c, 0xbc, 0x8e, 0xe9, 0x7f, 0xbb, 0xa8, 0x08, 0xcb, 0x14, 0x6f, 0xda,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x39, 0xb3, 0x33, 0xe8, 0x69, 0x4f, 0x21, 0x54, 0x6a, 0xd1, 0xed, 0xd9, 0xd8, 0x7e, 0xd9, 0x5b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3b, 0x27, 0x1f, 0x8a, 0xb2, 0xe6, 0xe4, 0xa2, 0x0b, 0xa8, 0x09, 0x0f, 0x43, 0xba, 0x78, 0xf3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9a, 0xd9, 0x83, 0xf3, 0xbf, 0x65, 0x1c, 0xd0, 0x39, 0x3f, 0x0a, 0x73, 0xcc, 0xcd, 0xea, 0x50,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8f, 0x47, 0x6c, 0xbf, 0xf7, 0x5c, 0x1f, 0x72, 0x5c, 0xe1, 0x8e, 0x4b, 0xbc, 0xd1, 0x9b, 0x32,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x90, 0x5b, 0x62, 0x67, 0xf1, 0xd6, 0xab, 0x53, 0x20, 0x83, 0x5a, 0x13, 0x3f, 0x09, 0x6f, 0x2a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x14, 0x5b, 0x60, 0xd6, 0xd0, 0x19, 0x3c, 0x23, 0xf4, 0x22, 0x18, 0x48, 0xa8, 0x92, 0xd6, 0x1a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x55, 0xcf, 0xb3, 0xfb, 0x6d, 0x75, 0xca, 0xd0, 0x44, 0x5b, 0xbc, 0x8d, 0xaf, 0xa2, 0x5b, 0x0f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7b, 0x8e, 0x70, 0x98, 0xe3, 0x57, 0xef, 0x71, 0x23, 0x7d, 0x46, 0xd8, 0xb0, 0x75, 0xb0, 0xf5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2b, 0xf2, 0x72, 0x29, 0x90, 0x1e, 0xb4, 0x0f, 0x2d, 0xf9, 0xd8, 0x39, 0x8d, 0x15, 0x05, 0xae,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x83, 0xa6, 0x34, 0x02, 0xa7, 0x7f, 0x9a, 0xd5, 0xc1, 0xe9, 0x31, 0xa9, 0x31, 0xec, 0xd7, 0x06,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6f, 0x8b, 0xa6, 0x52, 0x11, 0x52, 0xd3, 0x1f, 0x2b, 0xad, 0xa1, 0x84, 0x3e, 0x26, 0xb9, 0x73,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe5, 0xc3, 0xb8, 0xe3, 0x0f, 0xd2, 0xd8, 0xe6, 0x23, 0x9b, 0x17, 0xb4, 0x4b, 0xd2, 0x3b, 0xbd,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1a, 0xc1, 0xf7, 0x10, 0x2c, 0x59, 0x93, 0x3e, 0x8b, 0x2d, 0xdc, 0x3f, 0x14, 0xe9, 0x4b, 0xaa,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x21, 0xd9, 0xba, 0x49, 0xf2, 0x76, 0xb4, 0x5f, 0x11, 0xaf, 0x8f, 0xc7, 0x1a, 0x08, 0x8e, 0x3d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x64, 0x9f, 0x1c, 0xdd, 0xc3, 0x79, 0x2b, 0x46, 0x38, 0x63, 0x5a, 0x39, 0x2b, 0xc9, 0xba, 0xde,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe2, 0x77, 0x5e, 0x4b, 0x59, 0xc1, 0xbc, 0x2e, 0x31, 0xa2, 0x07, 0x8c, 0x11, 0xb5, 0xa0, 0x8c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2b, 0xe1, 0xfa, 0xe5, 0x04, 0x8a, 0x25, 0x58, 0x2a, 0x67, 0x9c, 0xa1, 0x09, 0x05, 0xeb, 0x80,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xda, 0x86, 0xf2, 0x92, 0xc6, 0xf4, 0x1e, 0xa3, 0x4f, 0xb2, 0x06, 0x8d, 0xf7, 0x5e, 0xcc, 0x29,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x22, 0x0d, 0xf1, 0x9f, 0x85, 0xd6, 0x9b, 0x1b, 0x56, 0x2f, 0xa6, 0x9a, 0x3c, 0x5b, 0xec, 0xa5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1f, 0x11, 0xd5, 0xd0, 0x35, 0x5e, 0x0b, 0x55, 0x6c, 0xcd, 0xb6, 0xc7, 0xf5, 0x08, 0x3b, 0x4d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x62, 0x52, 0x6b, 0x78, 0xbe, 0x79, 0xcb, 0x38, 0x46, 0x33, 0xc9, 0x1f, 0x83, 0xb4, 0x15, 0x1b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x90, 0xdd, 0xbc, 0xb9, 0x50, 0x84, 0x35, 0x92, 0xdd, 0x47, 0xbb, 0xef, 0x00, 0xfd, 0xc8, 0x76,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2f, 0xd0, 0xe4, 0x1c, 0x5b, 0x84, 0x02, 0x27, 0x73, 0x54, 0xa7, 0x39, 0x1d, 0x26, 0x18, 0xe2,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3c, 0xdf, 0x13, 0xe7, 0x2d, 0xee, 0x4c, 0x58, 0x1b, 0xaf, 0xec, 0x70, 0xb8, 0x5f, 0x96, 0x60,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xaf, 0xa2, 0xff, 0xc1, 0x37, 0x57, 0x70, 0x92, 0xe2, 0xb6, 0x54, 0xfa, 0x19, 0x9d, 0x2c, 0x43,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8d, 0x68, 0x3e, 0xe6, 0x3e, 0x60, 0xd2, 0x08, 0xe3, 0x43, 0xce, 0x48, 0xdb, 0xc4, 0x4c, 0xac,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x70, 0x5a, 0x4e, 0xf8, 0xba, 0x21, 0x33, 0x72, 0x9c, 0x20, 0x18, 0x5c, 0x3d, 0x3a, 0x47, 0x63,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x08, 0x61, 0xa8, 0x61, 0xc3, 0xdb, 0x4e, 0x94, 0x19, 0x42, 0x11, 0xb7, 0x7e, 0xd7, 0x61, 0xb9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x4b, 0x00, 0xc2, 0x7e, 0x8b, 0x26, 0xda, 0x7e, 0xab, 0x9d, 0x3a, 0x88, 0xde, 0xc8, 0xb0, 0x31,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x5f, 0x39, 0x7b, 0xf0, 0x30, 0x84, 0x82, 0x0c, 0xc8, 0x81, 0x0d, 0x52, 0xe5, 0xb6, 0x66, 0xe9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x63, 0xfa, 0xfa, 0xbb, 0x72, 0xc0, 0x7b, 0xfb, 0xd3, 0xdd, 0xc9, 0xb1, 0x20, 0x31, 0x04, 0xb8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x68, 0x3e, 0x21, 0x40, 0x58, 0x5b, 0x18, 0x45, 0x2d, 0xd4, 0xff, 0xbb, 0x93, 0xc9, 0x5d, 0xf9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x28, 0x68, 0x94, 0xe4, 0x8e, 0x53, 0x7f, 0x87, 0x63, 0xb5, 0x67, 0x07, 0xd7, 0xd1, 0x55, 0xc8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa4, 0x23, 0xde, 0xab, 0xc1, 0x73, 0xdc, 0xf7, 0xe2, 0xc4, 0xc5, 0x3e, 0x77, 0xd3, 0x7c, 0xd1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xeb, 0x81, 0x68, 0x31, 0x3e, 0x1c, 0xfd, 0xfd, 0xb5, 0xe9, 0x86, 0xd5, 0x42, 0x9c, 0xf1, 0x72,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x27, 0x12, 0x7d, 0xaa, 0xfc, 0x9a, 0xcc, 0xd2, 0xfb, 0x33, 0x4e, 0xc3, 0xeb, 0xa5, 0x23, 0x23,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xee, 0x07, 0x15, 0xb9, 0x6f, 0x72, 0xe3, 0xf7, 0xa2, 0x2a, 0x50, 0x64, 0xfc, 0x59, 0x2f, 0x4c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x29, 0xee, 0x52, 0x67, 0x70, 0xf2, 0xa1, 0x1d, 0xcf, 0xa9, 0x89, 0xd1, 0xce, 0x88, 0x83, 0x0f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x04, 0x93, 0x37, 0x0e, 0x05, 0x4b, 0x09, 0x87, 0x11, 0x30, 0xfe, 0x49, 0xaf, 0x73, 0x0a, 0x5a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9b, 0x7b, 0x94, 0x0f, 0x6c, 0x50, 0x9f, 0x9e, 0x44, 0xa4, 0xee, 0x14, 0x04, 0x48, 0xee, 0x46,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x29, 0x15, 0xbe, 0x4a, 0x1e, 0xcf, 0xdc, 0xbe, 0x3e, 0x02, 0x38, 0x11, 0xa1, 0x2b, 0xb6, 0xc7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x72, 0x40, 0xe5, 0x24, 0xbc, 0x51, 0xd8, 0xc4, 0xd4, 0x40, 0xb1, 0xbe, 0x55, 0xd1, 0x06, 0x2c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xda, 0x63, 0x03, 0x9d, 0x38, 0xcb, 0x46, 0x12, 0xb2, 0xdc, 0x36, 0xba, 0x26, 0x68, 0x4b, 0x93,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x0f, 0x59, 0xcb, 0x5a, 0x4b, 0x52, 0x2e, 0x2a, 0xc5, 0x6c, 0x1a, 0x64, 0xf5, 0x58, 0xad, 0x9a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7b, 0xfe, 0x9d, 0x87, 0x6c, 0x6d, 0x63, 0xc1, 0xd0, 0x35, 0xda, 0x8f, 0xe2, 0x1c, 0x40, 0x9d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xac, 0xda, 0xce, 0x80, 0x78, 0xa3, 0x2b, 0x1a, 0x18, 0x2b, 0xfa, 0x49, 0x87, 0xca, 0x13, 0x47,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
}

// VarTxt Known Answer Test Values. Keysize = 256.
unittest
{
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdd, 0xc6, 0xbf, 0x79, 0x0c, 0x15, 0x76, 0x0d, 0x8d, 0x9a, 0xeb, 0x6f, 0x9a, 0x75, 0xfd, 0x4e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x0a, 0x6b, 0xdc, 0x6d, 0x4c, 0x1e, 0x62, 0x80, 0x30, 0x1f, 0xd8, 0xe9, 0x7d, 0xdb, 0xe6, 0x01,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9b, 0x80, 0xee, 0xfb, 0x7e, 0xbe, 0x2d, 0x2b, 0x16, 0x24, 0x7a, 0xa0, 0xef, 0xc7, 0x2f, 0x5d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7f, 0x2c, 0x5e, 0xce, 0x07, 0xa9, 0x8d, 0x8b, 0xee, 0x13, 0xc5, 0x11, 0x77, 0x39, 0x5f, 0xf7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x78, 0x18, 0xd8, 0x00, 0xdc, 0xf6, 0xf4, 0xbe, 0x1e, 0x0e, 0x94, 0xf4, 0x03, 0xd1, 0xe4, 0xc2,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe7, 0x4c, 0xd1, 0xc9, 0x2f, 0x09, 0x19, 0xc3, 0x5a, 0x03, 0x24, 0x12, 0x3d, 0x61, 0x77, 0xd3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x80, 0x92, 0xa4, 0xdc, 0xf2, 0xda, 0x7e, 0x77, 0xe9, 0x3b, 0xdd, 0x37, 0x1d, 0xfe, 0xd8, 0x2e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x49, 0xaf, 0x6b, 0x37, 0x21, 0x35, 0xac, 0xef, 0x10, 0x13, 0x2e, 0x54, 0x8f, 0x21, 0x7b, 0x17,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8b, 0xcd, 0x40, 0xf9, 0x4e, 0xbb, 0x63, 0xb9, 0xf7, 0x90, 0x96, 0x76, 0xe6, 0x67, 0xf1, 0xe7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xfe, 0x1c, 0xff, 0xb8, 0x3f, 0x45, 0xdc, 0xfb, 0x38, 0xb2, 0x9b, 0xe4, 0x38, 0xdb, 0xd3, 0xab,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x0d, 0xc5, 0x8a, 0x8d, 0x88, 0x66, 0x23, 0x70, 0x5a, 0xec, 0x15, 0xcb, 0x1e, 0x70, 0xdc, 0x0e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc2, 0x18, 0xfa, 0xa1, 0x60, 0x56, 0xbd, 0x07, 0x74, 0xc3, 0xe8, 0xd7, 0x9c, 0x35, 0xa5, 0xe4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x04, 0x7b, 0xba, 0x83, 0xf7, 0xaa, 0x84, 0x17, 0x31, 0x50, 0x4e, 0x01, 0x22, 0x08, 0xfc, 0x9e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdc, 0x8f, 0x0e, 0x49, 0x15, 0xfd, 0x81, 0xba, 0x70, 0xa3, 0x31, 0x31, 0x08, 0x82, 0xf6, 0xda,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x15, 0x69, 0x85, 0x9e, 0xa6, 0xb7, 0x20, 0x6c, 0x30, 0xbf, 0x4f, 0xd0, 0xcb, 0xfa, 0xc3, 0x3c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x30, 0x0a, 0xde, 0x92, 0xf8, 0x8f, 0x48, 0xfa, 0x2d, 0xf7, 0x30, 0xec, 0x16, 0xef, 0x44, 0xcd,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1f, 0xe6, 0xcc, 0x3c, 0x05, 0x96, 0x5d, 0xc0, 0x8e, 0xb0, 0x59, 0x0c, 0x95, 0xac, 0x71, 0xd0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x59, 0xe8, 0x58, 0xea, 0xaa, 0x97, 0xfe, 0xc3, 0x81, 0x11, 0x27, 0x5b, 0x6c, 0xf5, 0xab, 0xc0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x22, 0x39, 0x45, 0x5e, 0x7a, 0xfe, 0x3b, 0x06, 0x16, 0x10, 0x02, 0x88, 0xcc, 0x5a, 0x72, 0x3b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3e, 0xe5, 0x00, 0xc5, 0xc8, 0xd6, 0x34, 0x79, 0x71, 0x71, 0x63, 0xe5, 0x5c, 0x5c, 0x45, 0x22,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd5, 0xe3, 0x8b, 0xf1, 0x5f, 0x16, 0xd9, 0x0e, 0x3e, 0x21, 0x40, 0x41, 0xd7, 0x74, 0xda, 0xa8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb1, 0xf4, 0x06, 0x6e, 0x6f, 0x4f, 0x18, 0x7d, 0xfe, 0x5f, 0x2a, 0xd1, 0xb1, 0x78, 0x19, 0xd0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6e, 0xf4, 0xcc, 0x4d, 0xe4, 0x9b, 0x11, 0x06, 0x5d, 0x7a, 0xf2, 0x90, 0x98, 0x54, 0x79, 0x4a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xac, 0x86, 0xbc, 0x60, 0x6b, 0x66, 0x40, 0xc3, 0x09, 0xe7, 0x82, 0xf2, 0x32, 0xbf, 0x36, 0x7f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x36, 0xaf, 0xf0, 0xef, 0x7b, 0xf3, 0x28, 0x07, 0x72, 0xcf, 0x4c, 0xac, 0x80, 0xa0, 0xd2, 0xb2,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1f, 0x8e, 0xed, 0xea, 0x0f, 0x62, 0xa1, 0x40, 0x6d, 0x58, 0xcf, 0xc3, 0xec, 0xea, 0x72, 0xcf,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xab, 0xf4, 0x15, 0x4a, 0x33, 0x75, 0xa1, 0xd3, 0xe6, 0xb1, 0xd4, 0x54, 0x43, 0x8f, 0x95, 0xa6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x96, 0xf9, 0x6e, 0x9d, 0x60, 0x7f, 0x66, 0x15, 0xfc, 0x19, 0x20, 0x61, 0xee, 0x64, 0x8b, 0x07,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xcf, 0x37, 0xcd, 0xaa, 0xa0, 0xd2, 0xd5, 0x36, 0xc7, 0x18, 0x57, 0x63, 0x4c, 0x79, 0x20, 0x64,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xfb, 0xd6, 0x64, 0x0c, 0x80, 0x24, 0x5c, 0x2b, 0x80, 0x53, 0x73, 0xf1, 0x30, 0x70, 0x31, 0x27,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8d, 0x6a, 0x8a, 0xfe, 0x55, 0xa6, 0xe4, 0x81, 0xba, 0xda, 0xe0, 0xd1, 0x46, 0xf4, 0x36, 0xdb,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6a, 0x49, 0x81, 0xf2, 0x91, 0x5e, 0x3e, 0x68, 0xaf, 0x6c, 0x22, 0x38, 0x5d, 0xd0, 0x67, 0x56,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x42, 0xa1, 0x13, 0x6e, 0x5f, 0x8d, 0x8d, 0x21, 0xd3, 0x10, 0x19, 0x98, 0x64, 0x2d, 0x57, 0x3b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9b, 0x47, 0x15, 0x96, 0xdc, 0x69, 0xae, 0x15, 0x86, 0xce, 0xe6, 0x15, 0x8b, 0x0b, 0x01, 0x81,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x75, 0x36, 0x65, 0xc4, 0xaf, 0x1e, 0xff, 0x33, 0xaa, 0x8b, 0x62, 0x8b, 0xf8, 0x74, 0x1c, 0xfd,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9a, 0x68, 0x2a, 0xcf, 0x40, 0xbe, 0x01, 0xf5, 0xb2, 0xa4, 0x19, 0x3c, 0x9a, 0x82, 0x40, 0x4d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x54, 0xfa, 0xfe, 0x26, 0xe4, 0x28, 0x7f, 0x17, 0xd1, 0x93, 0x5f, 0x87, 0xeb, 0x9a, 0xde, 0x01,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x49, 0xd5, 0x41, 0xb2, 0xe7, 0x4c, 0xfe, 0x73, 0xe6, 0xa8, 0xe8, 0x22, 0x5f, 0x7b, 0xd4, 0x49,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x11, 0xa4, 0x55, 0x30, 0xf6, 0x24, 0xff, 0x6f, 0x76, 0xa1, 0xb3, 0x82, 0x66, 0x26, 0xff, 0x7b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf9, 0x6b, 0x0c, 0x4a, 0x8b, 0xc6, 0xc8, 0x61, 0x30, 0x28, 0x9f, 0x60, 0xb4, 0x3b, 0x8f, 0xba,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x48, 0xc7, 0xd0, 0xe8, 0x08, 0x34, 0xeb, 0xdc, 0x35, 0xb6, 0x73, 0x5f, 0x76, 0xb4, 0x6c, 0x8b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x24, 0x63, 0x53, 0x1a, 0xb5, 0x4d, 0x66, 0x95, 0x5e, 0x73, 0xed, 0xc4, 0xcb, 0x8e, 0xaa, 0x45,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xac, 0x9b, 0xd8, 0xe2, 0x53, 0x04, 0x69, 0x13, 0x4b, 0x9d, 0x5b, 0x06, 0x5d, 0x4f, 0x56, 0x5b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3f, 0x5f, 0x91, 0x06, 0xd0, 0xe5, 0x2f, 0x97, 0x3d, 0x48, 0x90, 0xe6, 0xf3, 0x7e, 0x8a, 0x00,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x20, 0xeb, 0xc8, 0x6f, 0x13, 0x04, 0xd2, 0x72, 0xe2, 0xe2, 0x07, 0xe5, 0x9d, 0xb6, 0x39, 0xf0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe6, 0x7a, 0xe6, 0x42, 0x6b, 0xf9, 0x52, 0x6c, 0x97, 0x2c, 0xff, 0x07, 0x2b, 0x52, 0x25, 0x2c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1a, 0x51, 0x8d, 0xdd, 0xaf, 0x9e, 0xfa, 0x0d, 0x00, 0x2c, 0xc5, 0x8d, 0x10, 0x7e, 0xdf, 0xc8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xea, 0xd7, 0x31, 0xaf, 0x4d, 0x3a, 0x2f, 0xe3, 0xb3, 0x4b, 0xed, 0x04, 0x79, 0x42, 0xa4, 0x9f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb1, 0xd4, 0xef, 0xe4, 0x02, 0x42, 0xf8, 0x3e, 0x93, 0xb6, 0xc8, 0xd7, 0xef, 0xb5, 0xea, 0xe9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xcd, 0x2b, 0x1f, 0xec, 0x11, 0xfd, 0x90, 0x6c, 0x5c, 0x76, 0x30, 0x09, 0x94, 0x43, 0x61, 0x0a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa1, 0x85, 0x3f, 0xe4, 0x7f, 0xe2, 0x92, 0x89, 0xd1, 0x53, 0x16, 0x1d, 0x06, 0x38, 0x7d, 0x21,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x46, 0x32, 0x15, 0x41, 0x79, 0xa5, 0x55, 0xc1, 0x7e, 0xa6, 0x04, 0xd0, 0x88, 0x9f, 0xab, 0x14,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdd, 0x27, 0xca, 0xc6, 0x40, 0x1a, 0x02, 0x2e, 0x8f, 0x38, 0xf9, 0xf9, 0x3e, 0x77, 0x44, 0x17,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc0, 0x90, 0x31, 0x3e, 0xb9, 0x86, 0x74, 0xf3, 0x5f, 0x31, 0x23, 0x38, 0x5f, 0xb9, 0x5d, 0x4d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xcc, 0x35, 0x26, 0x26, 0x2b, 0x92, 0xf0, 0x2e, 0xdc, 0xe5, 0x48, 0xf7, 0x16, 0xb9, 0xf4, 0x5c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc0, 0x83, 0x8d, 0x1a, 0x2b, 0x16, 0xa7, 0xc7, 0xf0, 0xdf, 0xcc, 0x43, 0x3c, 0x39, 0x9c, 0x33,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x0d, 0x9a, 0xc7, 0x56, 0xeb, 0x29, 0x76, 0x95, 0xee, 0xd4, 0xd3, 0x82, 0xeb, 0x12, 0x6d, 0x26,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x56, 0xed, 0xe9, 0xdd, 0xa3, 0xf6, 0xf1, 0x41, 0xbf, 0xf1, 0x75, 0x7f, 0xa6, 0x89, 0xc3, 0xe1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x76, 0x8f, 0x52, 0x0e, 0xfe, 0x0f, 0x23, 0xe6, 0x1d, 0x3e, 0xc8, 0xad, 0x9c, 0xe9, 0x17, 0x74,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb1, 0x14, 0x4d, 0xdf, 0xa7, 0x57, 0x55, 0x21, 0x33, 0x90, 0xe7, 0xc5, 0x96, 0x66, 0x04, 0x90,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1d, 0x7c, 0x0c, 0x40, 0x40, 0xb3, 0x55, 0xb9, 0xd1, 0x07, 0xa9, 0x93, 0x25, 0xe3, 0xb0, 0x50,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd8, 0xe2, 0xbb, 0x1a, 0xe8, 0xee, 0x3d, 0xcf, 0x5b, 0xf7, 0xd6, 0xc3, 0x8d, 0xa8, 0x2a, 0x1a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xfa, 0xf8, 0x2d, 0x17, 0x8a, 0xf2, 0x5a, 0x98, 0x86, 0xa4, 0x7e, 0x7f, 0x78, 0x9b, 0x98, 0xd7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9b, 0x58, 0xdb, 0xfd, 0x77, 0xfe, 0x5a, 0xca, 0x9c, 0xfc, 0x19, 0x0c, 0xd1, 0xb8, 0x2d, 0x19,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x77, 0xf3, 0x92, 0x08, 0x90, 0x42, 0xe4, 0x78, 0xac, 0x16, 0xc0, 0xc8, 0x6a, 0x0b, 0x5d, 0xb5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x19, 0xf0, 0x8e, 0x34, 0x20, 0xee, 0x69, 0xb4, 0x77, 0xca, 0x14, 0x20, 0x28, 0x1c, 0x47, 0x82,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa1, 0xb1, 0x9b, 0xee, 0xe4, 0xe1, 0x17, 0x13, 0x9f, 0x74, 0xb3, 0xc5, 0x3f, 0xdc, 0xb8, 0x75,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa3, 0x7a, 0x58, 0x69, 0xb2, 0x18, 0xa9, 0xf3, 0xa0, 0x86, 0x8d, 0x19, 0xae, 0xa0, 0xad, 0x6a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xbc, 0x35, 0x94, 0xe8, 0x65, 0xbc, 0xd0, 0x26, 0x1b, 0x13, 0x20, 0x27, 0x31, 0xf3, 0x35, 0x80,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x81, 0x14, 0x41, 0xce, 0x1d, 0x30, 0x9e, 0xee, 0x71, 0x85, 0xe8, 0xc7, 0x52, 0xc0, 0x75, 0x57,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x95, 0x99, 0x71, 0xce, 0x41, 0x34, 0x19, 0x05, 0x63, 0x51, 0x8e, 0x70, 0x0b, 0x98, 0x74, 0xd1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x76, 0xb5, 0x61, 0x4a, 0x04, 0x27, 0x07, 0xc9, 0x8e, 0x21, 0x32, 0xe2, 0xe8, 0x05, 0xfe, 0x63,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7d, 0x9f, 0xa6, 0xa5, 0x75, 0x30, 0xd0, 0xf0, 0x36, 0xfe, 0xc3, 0x1c, 0x23, 0x0b, 0x0c, 0xc6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x96, 0x41, 0x53, 0xa8, 0x3b, 0xf6, 0x98, 0x9a, 0x4b, 0xa8, 0x0d, 0xaa, 0x91, 0xc3, 0xe0, 0x81,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa0, 0x13, 0x01, 0x4d, 0x4c, 0xe8, 0x05, 0x4c, 0xf2, 0x59, 0x1d, 0x06, 0xf6, 0xf2, 0xf1, 0x76,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd1, 0xc5, 0xf6, 0x39, 0x9b, 0xf3, 0x82, 0x50, 0x2e, 0x38, 0x5e, 0xee, 0x14, 0x74, 0xa8, 0x69,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x00, 0x07, 0xe2, 0x0b, 0x82, 0x98, 0xec, 0x35, 0x4f, 0x0f, 0x5f, 0xe7, 0x47, 0x0f, 0x36, 0xbd,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb9, 0x5b, 0xa0, 0x5b, 0x33, 0x2d, 0xa6, 0x1e, 0xf6, 0x3a, 0x2b, 0x31, 0xfc, 0xad, 0x98, 0x79,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x46, 0x20, 0xa4, 0x9b, 0xd9, 0x67, 0x49, 0x15, 0x61, 0x66, 0x9a, 0xb2, 0x5d, 0xce, 0x45, 0xf4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x12, 0xe7, 0x12, 0x14, 0xae, 0x8e, 0x04, 0xf0, 0xbb, 0x63, 0xd7, 0x42, 0x5c, 0x6f, 0x14, 0xd5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x4c, 0xc4, 0x2f, 0xc1, 0x40, 0x7b, 0x00, 0x8f, 0xe3, 0x50, 0x90, 0x7c, 0x09, 0x2e, 0x80, 0xac,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x08, 0xb2, 0x44, 0xce, 0x7c, 0xbc, 0x8e, 0xe9, 0x7f, 0xbb, 0xa8, 0x08, 0xcb, 0x14, 0x6f, 0xda,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x39, 0xb3, 0x33, 0xe8, 0x69, 0x4f, 0x21, 0x54, 0x6a, 0xd1, 0xed, 0xd9, 0xd8, 0x7e, 0xd9, 0x5b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3b, 0x27, 0x1f, 0x8a, 0xb2, 0xe6, 0xe4, 0xa2, 0x0b, 0xa8, 0x09, 0x0f, 0x43, 0xba, 0x78, 0xf3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9a, 0xd9, 0x83, 0xf3, 0xbf, 0x65, 0x1c, 0xd0, 0x39, 0x3f, 0x0a, 0x73, 0xcc, 0xcd, 0xea, 0x50,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8f, 0x47, 0x6c, 0xbf, 0xf7, 0x5c, 0x1f, 0x72, 0x5c, 0xe1, 0x8e, 0x4b, 0xbc, 0xd1, 0x9b, 0x32,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x90, 0x5b, 0x62, 0x67, 0xf1, 0xd6, 0xab, 0x53, 0x20, 0x83, 0x5a, 0x13, 0x3f, 0x09, 0x6f, 0x2a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x14, 0x5b, 0x60, 0xd6, 0xd0, 0x19, 0x3c, 0x23, 0xf4, 0x22, 0x18, 0x48, 0xa8, 0x92, 0xd6, 0x1a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x55, 0xcf, 0xb3, 0xfb, 0x6d, 0x75, 0xca, 0xd0, 0x44, 0x5b, 0xbc, 0x8d, 0xaf, 0xa2, 0x5b, 0x0f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7b, 0x8e, 0x70, 0x98, 0xe3, 0x57, 0xef, 0x71, 0x23, 0x7d, 0x46, 0xd8, 0xb0, 0x75, 0xb0, 0xf5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2b, 0xf2, 0x72, 0x29, 0x90, 0x1e, 0xb4, 0x0f, 0x2d, 0xf9, 0xd8, 0x39, 0x8d, 0x15, 0x05, 0xae,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x83, 0xa6, 0x34, 0x02, 0xa7, 0x7f, 0x9a, 0xd5, 0xc1, 0xe9, 0x31, 0xa9, 0x31, 0xec, 0xd7, 0x06,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6f, 0x8b, 0xa6, 0x52, 0x11, 0x52, 0xd3, 0x1f, 0x2b, 0xad, 0xa1, 0x84, 0x3e, 0x26, 0xb9, 0x73,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe5, 0xc3, 0xb8, 0xe3, 0x0f, 0xd2, 0xd8, 0xe6, 0x23, 0x9b, 0x17, 0xb4, 0x4b, 0xd2, 0x3b, 0xbd,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1a, 0xc1, 0xf7, 0x10, 0x2c, 0x59, 0x93, 0x3e, 0x8b, 0x2d, 0xdc, 0x3f, 0x14, 0xe9, 0x4b, 0xaa,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x21, 0xd9, 0xba, 0x49, 0xf2, 0x76, 0xb4, 0x5f, 0x11, 0xaf, 0x8f, 0xc7, 0x1a, 0x08, 0x8e, 0x3d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x64, 0x9f, 0x1c, 0xdd, 0xc3, 0x79, 0x2b, 0x46, 0x38, 0x63, 0x5a, 0x39, 0x2b, 0xc9, 0xba, 0xde,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe2, 0x77, 0x5e, 0x4b, 0x59, 0xc1, 0xbc, 0x2e, 0x31, 0xa2, 0x07, 0x8c, 0x11, 0xb5, 0xa0, 0x8c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2b, 0xe1, 0xfa, 0xe5, 0x04, 0x8a, 0x25, 0x58, 0x2a, 0x67, 0x9c, 0xa1, 0x09, 0x05, 0xeb, 0x80,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xda, 0x86, 0xf2, 0x92, 0xc6, 0xf4, 0x1e, 0xa3, 0x4f, 0xb2, 0x06, 0x8d, 0xf7, 0x5e, 0xcc, 0x29,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x22, 0x0d, 0xf1, 0x9f, 0x85, 0xd6, 0x9b, 0x1b, 0x56, 0x2f, 0xa6, 0x9a, 0x3c, 0x5b, 0xec, 0xa5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1f, 0x11, 0xd5, 0xd0, 0x35, 0x5e, 0x0b, 0x55, 0x6c, 0xcd, 0xb6, 0xc7, 0xf5, 0x08, 0x3b, 0x4d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x62, 0x52, 0x6b, 0x78, 0xbe, 0x79, 0xcb, 0x38, 0x46, 0x33, 0xc9, 0x1f, 0x83, 0xb4, 0x15, 0x1b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x90, 0xdd, 0xbc, 0xb9, 0x50, 0x84, 0x35, 0x92, 0xdd, 0x47, 0xbb, 0xef, 0x00, 0xfd, 0xc8, 0x76,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2f, 0xd0, 0xe4, 0x1c, 0x5b, 0x84, 0x02, 0x27, 0x73, 0x54, 0xa7, 0x39, 0x1d, 0x26, 0x18, 0xe2,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3c, 0xdf, 0x13, 0xe7, 0x2d, 0xee, 0x4c, 0x58, 0x1b, 0xaf, 0xec, 0x70, 0xb8, 0x5f, 0x96, 0x60,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xaf, 0xa2, 0xff, 0xc1, 0x37, 0x57, 0x70, 0x92, 0xe2, 0xb6, 0x54, 0xfa, 0x19, 0x9d, 0x2c, 0x43,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8d, 0x68, 0x3e, 0xe6, 0x3e, 0x60, 0xd2, 0x08, 0xe3, 0x43, 0xce, 0x48, 0xdb, 0xc4, 0x4c, 0xac,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x70, 0x5a, 0x4e, 0xf8, 0xba, 0x21, 0x33, 0x72, 0x9c, 0x20, 0x18, 0x5c, 0x3d, 0x3a, 0x47, 0x63,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x08, 0x61, 0xa8, 0x61, 0xc3, 0xdb, 0x4e, 0x94, 0x19, 0x42, 0x11, 0xb7, 0x7e, 0xd7, 0x61, 0xb9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x4b, 0x00, 0xc2, 0x7e, 0x8b, 0x26, 0xda, 0x7e, 0xab, 0x9d, 0x3a, 0x88, 0xde, 0xc8, 0xb0, 0x31,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x5f, 0x39, 0x7b, 0xf0, 0x30, 0x84, 0x82, 0x0c, 0xc8, 0x81, 0x0d, 0x52, 0xe5, 0xb6, 0x66, 0xe9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x63, 0xfa, 0xfa, 0xbb, 0x72, 0xc0, 0x7b, 0xfb, 0xd3, 0xdd, 0xc9, 0xb1, 0x20, 0x31, 0x04, 0xb8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x68, 0x3e, 0x21, 0x40, 0x58, 0x5b, 0x18, 0x45, 0x2d, 0xd4, 0xff, 0xbb, 0x93, 0xc9, 0x5d, 0xf9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x28, 0x68, 0x94, 0xe4, 0x8e, 0x53, 0x7f, 0x87, 0x63, 0xb5, 0x67, 0x07, 0xd7, 0xd1, 0x55, 0xc8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa4, 0x23, 0xde, 0xab, 0xc1, 0x73, 0xdc, 0xf7, 0xe2, 0xc4, 0xc5, 0x3e, 0x77, 0xd3, 0x7c, 0xd1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xeb, 0x81, 0x68, 0x31, 0x3e, 0x1c, 0xfd, 0xfd, 0xb5, 0xe9, 0x86, 0xd5, 0x42, 0x9c, 0xf1, 0x72,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x27, 0x12, 0x7d, 0xaa, 0xfc, 0x9a, 0xcc, 0xd2, 0xfb, 0x33, 0x4e, 0xc3, 0xeb, 0xa5, 0x23, 0x23,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xee, 0x07, 0x15, 0xb9, 0x6f, 0x72, 0xe3, 0xf7, 0xa2, 0x2a, 0x50, 0x64, 0xfc, 0x59, 0x2f, 0x4c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x29, 0xee, 0x52, 0x67, 0x70, 0xf2, 0xa1, 0x1d, 0xcf, 0xa9, 0x89, 0xd1, 0xce, 0x88, 0x83, 0x0f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x04, 0x93, 0x37, 0x0e, 0x05, 0x4b, 0x09, 0x87, 0x11, 0x30, 0xfe, 0x49, 0xaf, 0x73, 0x0a, 0x5a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9b, 0x7b, 0x94, 0x0f, 0x6c, 0x50, 0x9f, 0x9e, 0x44, 0xa4, 0xee, 0x14, 0x04, 0x48, 0xee, 0x46,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x29, 0x15, 0xbe, 0x4a, 0x1e, 0xcf, 0xdc, 0xbe, 0x3e, 0x02, 0x38, 0x11, 0xa1, 0x2b, 0xb6, 0xc7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x72, 0x40, 0xe5, 0x24, 0xbc, 0x51, 0xd8, 0xc4, 0xd4, 0x40, 0xb1, 0xbe, 0x55, 0xd1, 0x06, 0x2c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xda, 0x63, 0x03, 0x9d, 0x38, 0xcb, 0x46, 0x12, 0xb2, 0xdc, 0x36, 0xba, 0x26, 0x68, 0x4b, 0x93,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x0f, 0x59, 0xcb, 0x5a, 0x4b, 0x52, 0x2e, 0x2a, 0xc5, 0x6c, 0x1a, 0x64, 0xf5, 0x58, 0xad, 0x9a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7b, 0xfe, 0x9d, 0x87, 0x6c, 0x6d, 0x63, 0xc1, 0xd0, 0x35, 0xda, 0x8f, 0xe2, 0x1c, 0x40, 0x9d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xac, 0xda, 0xce, 0x80, 0x78, 0xa3, 0x2b, 0x1a, 0x18, 0x2b, 0xfa, 0x49, 0x87, 0xca, 0x13, 0x47,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
}

// VarKey Known Answer Test Values. Keysize = 128.
unittest
{
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x0e, 0xdd, 0x33, 0xd3, 0xc6, 0x21, 0xe5, 0x46, 0x45, 0x5b, 0xd8, 0xba, 0x14, 0x18, 0xbe, 0xc8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x4b, 0xc3, 0xf8, 0x83, 0x45, 0x0c, 0x11, 0x3c, 0x64, 0xca, 0x42, 0xe1, 0x11, 0x2a, 0x9e, 0x87,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x72, 0xa1, 0xda, 0x77, 0x0f, 0x5d, 0x7a, 0xc4, 0xc9, 0xef, 0x94, 0xd8, 0x22, 0xaf, 0xfd, 0x97,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x97, 0x00, 0x14, 0xd6, 0x34, 0xe2, 0xb7, 0x65, 0x07, 0x77, 0xe8, 0xe8, 0x4d, 0x03, 0xcc, 0xd8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf1, 0x7e, 0x79, 0xae, 0xd0, 0xdb, 0x7e, 0x27, 0x9e, 0x95, 0x5b, 0x5f, 0x49, 0x38, 0x75, 0xa7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9e, 0xd5, 0xa7, 0x51, 0x36, 0xa9, 0x40, 0xd0, 0x96, 0x3d, 0xa3, 0x79, 0xdb, 0x4a, 0xf2, 0x6a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc4, 0x29, 0x5f, 0x83, 0x46, 0x5c, 0x77, 0x55, 0xe8, 0xfa, 0x36, 0x4b, 0xac, 0x6a, 0x7e, 0xa5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb1, 0xd7, 0x58, 0x25, 0x6b, 0x28, 0xfd, 0x85, 0x0a, 0xd4, 0x94, 0x42, 0x08, 0xcf, 0x11, 0x55,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x42, 0xff, 0xb3, 0x4c, 0x74, 0x3d, 0xe4, 0xd8, 0x8c, 0xa3, 0x80, 0x11, 0xc9, 0x90, 0x89, 0x0b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x99, 0x58, 0xf0, 0xec, 0xea, 0x8b, 0x21, 0x72, 0xc0, 0xc1, 0x99, 0x5f, 0x91, 0x82, 0xc0, 0xf3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x95, 0x6d, 0x77, 0x98, 0xfa, 0xc2, 0x0f, 0x82, 0xa8, 0x82, 0x3f, 0x98, 0x4d, 0x06, 0xf7, 0xf5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa0, 0x1b, 0xf4, 0x4f, 0x2d, 0x16, 0xbe, 0x92, 0x8c, 0xa4, 0x4a, 0xaf, 0x7b, 0x9b, 0x10, 0x6b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb5, 0xf1, 0xa3, 0x3e, 0x50, 0xd4, 0x0d, 0x10, 0x37, 0x64, 0xc7, 0x6b, 0xd4, 0xc6, 0xb6, 0xf8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x26, 0x37, 0x05, 0x0c, 0x9f, 0xc0, 0xd4, 0x81, 0x7e, 0x2d, 0x69, 0xde, 0x87, 0x8a, 0xee, 0x8d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x11, 0x3e, 0xcb, 0xe4, 0xa4, 0x53, 0x26, 0x9a, 0x0d, 0xd2, 0x60, 0x69, 0x46, 0x7f, 0xb5, 0xb5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x97, 0xd0, 0x75, 0x4f, 0xe6, 0x8f, 0x11, 0xb9, 0xe3, 0x75, 0xd0, 0x70, 0xa6, 0x08, 0xc8, 0x84,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc6, 0xa0, 0xb3, 0xe9, 0x98, 0xd0, 0x50, 0x68, 0xa5, 0x39, 0x97, 0x78, 0x40, 0x52, 0x00, 0xb4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdf, 0x55, 0x6a, 0x33, 0x43, 0x8d, 0xb8, 0x7b, 0xc4, 0x1b, 0x17, 0x52, 0xc5, 0x5e, 0x5e, 0x49,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x90, 0xfb, 0x12, 0x8d, 0x3a, 0x1a, 0xf6, 0xe5, 0x48, 0x52, 0x1b, 0xb9, 0x62, 0xbf, 0x1f, 0x05,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x26, 0x29, 0x8e, 0x9c, 0x1d, 0xb5, 0x17, 0xc2, 0x15, 0xfa, 0xdf, 0xb7, 0xd2, 0xa8, 0xd6, 0x91,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa6, 0xcb, 0x76, 0x1d, 0x61, 0xf8, 0x29, 0x2d, 0x0d, 0xf3, 0x93, 0xa2, 0x79, 0xad, 0x03, 0x80,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x12, 0xac, 0xd8, 0x9b, 0x13, 0xcd, 0x5f, 0x87, 0x26, 0xe3, 0x4d, 0x44, 0xfd, 0x48, 0x61, 0x08,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x95, 0xb1, 0x70, 0x3f, 0xc5, 0x7b, 0xa0, 0x9f, 0xe0, 0xc3, 0x58, 0x0f, 0xeb, 0xdd, 0x7e, 0xd4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xde, 0x11, 0x72, 0x2d, 0x89, 0x3e, 0x9f, 0x91, 0x21, 0xc3, 0x81, 0xbe, 0xcc, 0x1d, 0xa5, 0x9a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6d, 0x11, 0x4c, 0xcb, 0x27, 0xbf, 0x39, 0x10, 0x12, 0xe8, 0x97, 0x4c, 0x54, 0x6d, 0x9b, 0xf2,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x5c, 0xe3, 0x7e, 0x17, 0xeb, 0x46, 0x46, 0xec, 0xfa, 0xc2, 0x9b, 0x9c, 0xc3, 0x8d, 0x93, 0x40,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x18, 0xc1, 0xb6, 0xe2, 0x15, 0x71, 0x22, 0x05, 0x6d, 0x02, 0x43, 0xd8, 0xa1, 0x65, 0xcd, 0xdb,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x99, 0x69, 0x3e, 0x6a, 0x59, 0xd1, 0x36, 0x6c, 0x74, 0xd8, 0x23, 0x56, 0x2d, 0x7e, 0x14, 0x31,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6c, 0x7c, 0x64, 0xdc, 0x84, 0xa8, 0xbb, 0xa7, 0x58, 0xed, 0x17, 0xeb, 0x02, 0x5a, 0x57, 0xe3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe1, 0x7b, 0xc7, 0x9f, 0x30, 0xea, 0xab, 0x2f, 0xac, 0x2c, 0xbb, 0xe3, 0x45, 0x8d, 0x68, 0x7a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x11, 0x14, 0xbc, 0x20, 0x28, 0x00, 0x9b, 0x92, 0x3f, 0x0b, 0x01, 0x91, 0x5c, 0xe5, 0xe7, 0xc4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9c, 0x28, 0x52, 0x4a, 0x16, 0xa1, 0xe1, 0xc1, 0x45, 0x29, 0x71, 0xca, 0xa8, 0xd1, 0x34, 0x76,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xed, 0x62, 0xe1, 0x63, 0x63, 0x63, 0x83, 0x60, 0xfd, 0xd6, 0xad, 0x62, 0x11, 0x27, 0x94, 0xf0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x5a, 0x86, 0x88, 0xf0, 0xb2, 0xa2, 0xc1, 0x62, 0x24, 0xc1, 0x61, 0x65, 0x8f, 0xfd, 0x40, 0x44,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x23, 0xf7, 0x10, 0x84, 0x2b, 0x9b, 0xb9, 0xc3, 0x2f, 0x26, 0x64, 0x8c, 0x78, 0x68, 0x07, 0xca,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x44, 0xa9, 0x8b, 0xf1, 0x1e, 0x16, 0x3f, 0x63, 0x2c, 0x47, 0xec, 0x6a, 0x49, 0x68, 0x3a, 0x89,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x0f, 0x18, 0xaf, 0xf9, 0x42, 0x74, 0x69, 0x6d, 0x9b, 0x61, 0x84, 0x8b, 0xd5, 0x0a, 0xc5, 0xe5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x82, 0x40, 0x85, 0x71, 0xc3, 0xe2, 0x42, 0x45, 0x40, 0x20, 0x7f, 0x83, 0x3b, 0x6d, 0xda, 0x69,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x30, 0x3f, 0xf9, 0x96, 0x94, 0x7f, 0x0c, 0x7d, 0x1f, 0x43, 0xc8, 0xf3, 0x02, 0x7b, 0x9b, 0x75,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7d, 0xf4, 0xda, 0xf4, 0xad, 0x29, 0xa3, 0x61, 0x5a, 0x9b, 0x6e, 0xce, 0x5c, 0x99, 0x51, 0x8a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc7, 0x29, 0x54, 0xa4, 0x8d, 0x07, 0x74, 0xdb, 0x0b, 0x49, 0x71, 0xc5, 0x26, 0x26, 0x04, 0x15,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1d, 0xf9, 0xb7, 0x61, 0x12, 0xdc, 0x65, 0x31, 0xe0, 0x7d, 0x2c, 0xfd, 0xa0, 0x44, 0x11, 0xf0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8e, 0x4d, 0x8e, 0x69, 0x91, 0x19, 0xe1, 0xfc, 0x87, 0x54, 0x5a, 0x64, 0x7f, 0xb1, 0xd3, 0x4f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe6, 0xc4, 0x80, 0x7a, 0xe1, 0x1f, 0x36, 0xf0, 0x91, 0xc5, 0x7d, 0x9f, 0xb6, 0x85, 0x48, 0xd1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8e, 0xbf, 0x73, 0xaa, 0xd4, 0x9c, 0x82, 0x00, 0x7f, 0x77, 0xa5, 0xc1, 0xcc, 0xec, 0x6a, 0xb4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x4f, 0xb2, 0x88, 0xcc, 0x20, 0x40, 0x04, 0x90, 0x01, 0xd2, 0xc7, 0x58, 0x5a, 0xd1, 0x23, 0xfc,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x04, 0x49, 0x71, 0x10, 0xef, 0xb9, 0xdc, 0xeb, 0x13, 0xe2, 0xb1, 0x3f, 0xb4, 0x46, 0x55, 0x64,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x75, 0x55, 0x0e, 0x6c, 0xb5, 0xa8, 0x8e, 0x49, 0x63, 0x4c, 0x9a, 0xb6, 0x9e, 0xda, 0x04, 0x30,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb6, 0x76, 0x84, 0x73, 0xce, 0x98, 0x43, 0xea, 0x66, 0xa8, 0x14, 0x05, 0xdd, 0x50, 0xb3, 0x45,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xcb, 0x2f, 0x43, 0x03, 0x83, 0xf9, 0x08, 0x4e, 0x03, 0xa6, 0x53, 0x57, 0x1e, 0x06, 0x5d, 0xe6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xff, 0x4e, 0x66, 0xc0, 0x7b, 0xae, 0x3e, 0x79, 0xfb, 0x7d, 0x21, 0x08, 0x47, 0xa3, 0xb0, 0xba,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7b, 0x90, 0x78, 0x51, 0x25, 0x50, 0x5f, 0xad, 0x59, 0xb1, 0x3c, 0x18, 0x6d, 0xd6, 0x6c, 0xe3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8b, 0x52, 0x7a, 0x6a, 0xeb, 0xda, 0xec, 0x9e, 0xae, 0xf8, 0xed, 0xa2, 0xcb, 0x77, 0x83, 0xe5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x43, 0xfd, 0xaf, 0x53, 0xeb, 0xbc, 0x98, 0x80, 0xc2, 0x28, 0x61, 0x7d, 0x6a, 0x9b, 0x54, 0x8b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x53, 0x78, 0x61, 0x04, 0xb9, 0x74, 0x4b, 0x98, 0xf0, 0x52, 0xc4, 0x6f, 0x1c, 0x85, 0x0d, 0x0b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb5, 0xab, 0x30, 0x13, 0xdd, 0x1e, 0x61, 0xdf, 0x06, 0xcb, 0xaf, 0x34, 0xca, 0x2a, 0xee, 0x78,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x74, 0x70, 0x46, 0x9b, 0xe9, 0x72, 0x30, 0x30, 0xfd, 0xcc, 0x73, 0xa8, 0xcd, 0x4f, 0xbb, 0x10,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa3, 0x5a, 0x63, 0xf5, 0x34, 0x3e, 0xbe, 0x9e, 0xf8, 0x16, 0x7b, 0xcb, 0x48, 0xad, 0x12, 0x2e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xfd, 0x86, 0x87, 0xf0, 0x75, 0x7a, 0x21, 0x0e, 0x9f, 0xdf, 0x18, 0x12, 0x04, 0xc3, 0x08, 0x63,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7a, 0x18, 0x1e, 0x84, 0xbd, 0x54, 0x57, 0xd2, 0x6a, 0x88, 0xfb, 0xae, 0x96, 0x01, 0x8f, 0xb0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x65, 0x33, 0x17, 0xb9, 0x36, 0x2b, 0x6f, 0x9b, 0x9e, 0x1a, 0x58, 0x0e, 0x68, 0xd4, 0x94, 0xb5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x99, 0x5c, 0x9d, 0xc0, 0xb6, 0x89, 0xf0, 0x3c, 0x45, 0x86, 0x7b, 0x5f, 0xaa, 0x5c, 0x18, 0xd1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x77, 0xa4, 0xd9, 0x6d, 0x56, 0xdd, 0xa3, 0x98, 0xb9, 0xaa, 0xbe, 0xcf, 0xc7, 0x57, 0x29, 0xfd,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x84, 0xbe, 0x19, 0xe0, 0x53, 0x63, 0x5f, 0x09, 0xf2, 0x66, 0x5e, 0x7b, 0xae, 0x85, 0xb4, 0x2d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x32, 0xcd, 0x65, 0x28, 0x42, 0x92, 0x6a, 0xea, 0x4a, 0xa6, 0x13, 0x7b, 0xb2, 0xbe, 0x2b, 0x5e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x49, 0x3d, 0x4a, 0x4f, 0x38, 0xeb, 0xb3, 0x37, 0xd1, 0x0a, 0xa8, 0x4e, 0x91, 0x71, 0xa5, 0x54,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd9, 0xbf, 0xf7, 0xff, 0x45, 0x4b, 0x0e, 0xc5, 0xa4, 0xa2, 0xa6, 0x95, 0x66, 0xe2, 0xcb, 0x84,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x35, 0x35, 0xd5, 0x65, 0xac, 0xe3, 0xf3, 0x1e, 0xb2, 0x49, 0xba, 0x2c, 0xc6, 0x76, 0x5d, 0x7a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf6, 0x0e, 0x91, 0xfc, 0x32, 0x69, 0xee, 0xcf, 0x32, 0x31, 0xc6, 0xe9, 0x94, 0x56, 0x97, 0xc6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xab, 0x69, 0xcf, 0xad, 0xf5, 0x1f, 0x8e, 0x60, 0x4d, 0x9c, 0xc3, 0x71, 0x82, 0xf6, 0x63, 0x5a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x78, 0x66, 0x37, 0x3f, 0x24, 0xa0, 0xb6, 0xed, 0x56, 0xe0, 0xd9, 0x6f, 0xcd, 0xaf, 0xb8, 0x77,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1e, 0xa4, 0x48, 0xc2, 0xaa, 0xc9, 0x54, 0xf5, 0xd8, 0x12, 0xe9, 0xd7, 0x84, 0x94, 0x44, 0x6a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xac, 0xc5, 0x59, 0x9d, 0xd8, 0xac, 0x02, 0x23, 0x9a, 0x0f, 0xef, 0x4a, 0x36, 0xdd, 0x16, 0x68,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd8, 0x76, 0x44, 0x68, 0xbb, 0x10, 0x38, 0x28, 0xcf, 0x7e, 0x14, 0x73, 0xce, 0x89, 0x50, 0x73,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1b, 0x0d, 0x02, 0x89, 0x36, 0x83, 0xb9, 0xf1, 0x80, 0x45, 0x8e, 0x4a, 0xa6, 0xb7, 0x39, 0x82,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x96, 0xd9, 0xb0, 0x17, 0xd3, 0x02, 0xdf, 0x41, 0x0a, 0x93, 0x7d, 0xcd, 0xb8, 0xbb, 0x6e, 0x43,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xef, 0x16, 0x23, 0xcc, 0x44, 0x31, 0x3c, 0xff, 0x44, 0x0b, 0x15, 0x94, 0xa7, 0xe2, 0x1c, 0xc6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x28, 0x4c, 0xa2, 0xfa, 0x35, 0x80, 0x7b, 0x8b, 0x0a, 0xe4, 0xd1, 0x9e, 0x11, 0xd7, 0xdb, 0xd7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf2, 0xe9, 0x76, 0x87, 0x57, 0x55, 0xf9, 0x40, 0x1d, 0x54, 0xf3, 0x6e, 0x2a, 0x23, 0xa5, 0x94,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xec, 0x19, 0x8a, 0x18, 0xe1, 0x0e, 0x53, 0x24, 0x03, 0xb7, 0xe2, 0x08, 0x87, 0xc8, 0xdd, 0x80,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x54, 0x5d, 0x50, 0xeb, 0xd9, 0x19, 0xe4, 0xa6, 0x94, 0x9d, 0x96, 0xad, 0x47, 0xe4, 0x6a, 0x80,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdb, 0xdf, 0xb5, 0x27, 0x06, 0x0e, 0x0a, 0x71, 0x00, 0x9c, 0x7b, 0xb0, 0xc6, 0x8f, 0x1d, 0x44,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9c, 0xfa, 0x13, 0x22, 0xea, 0x33, 0xda, 0x21, 0x73, 0xa0, 0x24, 0xf2, 0xff, 0x0d, 0x89, 0x6d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x87, 0x85, 0xb1, 0xa7, 0x5b, 0x0f, 0x3b, 0xd9, 0x58, 0xdc, 0xd0, 0xe2, 0x93, 0x18, 0xc5, 0x21,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x38, 0xf6, 0x7b, 0x9e, 0x98, 0xe4, 0xa9, 0x7b, 0x6d, 0xf0, 0x30, 0xa9, 0xfc, 0xdd, 0x01, 0x04,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x19, 0x2a, 0xff, 0xfb, 0x2c, 0x88, 0x0e, 0x82, 0xb0, 0x59, 0x26, 0xd0, 0xfc, 0x6c, 0x44, 0x8b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6a, 0x79, 0x80, 0xce, 0x7b, 0x10, 0x5c, 0xf5, 0x30, 0x95, 0x2d, 0x74, 0xda, 0xaf, 0x79, 0x8c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xea, 0x36, 0x95, 0xe1, 0x35, 0x1b, 0x9d, 0x68, 0x58, 0xbd, 0x95, 0x8c, 0xf5, 0x13, 0xef, 0x6c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6d, 0xa0, 0x49, 0x0b, 0xa0, 0xba, 0x03, 0x43, 0xb9, 0x35, 0x68, 0x1d, 0x2c, 0xce, 0x5b, 0xa1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf0, 0xea, 0x23, 0xaf, 0x08, 0x53, 0x40, 0x11, 0xc6, 0x00, 0x09, 0xab, 0x29, 0xad, 0xa2, 0xf1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xff, 0x13, 0x80, 0x6c, 0xf1, 0x9c, 0xc3, 0x87, 0x21, 0x55, 0x4d, 0x7c, 0x0f, 0xcd, 0xcd, 0x4b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x68, 0x38, 0xaf, 0x1f, 0x4f, 0x69, 0xba, 0xe9, 0xd8, 0x5d, 0xd1, 0x88, 0xdc, 0xdf, 0x06, 0x88,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x36, 0xcf, 0x44, 0xc9, 0x2d, 0x55, 0x0b, 0xfb, 0x1e, 0xd2, 0x8e, 0xf5, 0x83, 0xdd, 0xf5, 0xd7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd0, 0x6e, 0x31, 0x95, 0xb5, 0x37, 0x6f, 0x10, 0x9d, 0x5c, 0x4e, 0xc6, 0xc5, 0xd6, 0x2c, 0xed,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc4, 0x40, 0xde, 0x01, 0x4d, 0x3d, 0x61, 0x07, 0x07, 0x27, 0x9b, 0x13, 0x24, 0x2a, 0x5c, 0x36,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf0, 0xc5, 0xc6, 0xff, 0xa5, 0xe0, 0xbd, 0x3a, 0x94, 0xc8, 0x8f, 0x6b, 0x6f, 0x7c, 0x16, 0xb9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3e, 0x40, 0xc3, 0x90, 0x1c, 0xd7, 0xef, 0xfc, 0x22, 0xbf, 0xfc, 0x35, 0xde, 0xe0, 0xb4, 0xd9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb6, 0x33, 0x05, 0xc7, 0x2b, 0xed, 0xfa, 0xb9, 0x73, 0x82, 0xc4, 0x06, 0xd0, 0xc4, 0x9b, 0xc6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x36, 0xbb, 0xaa, 0xb2, 0x2a, 0x6b, 0xd4, 0x92, 0x5a, 0x99, 0xa2, 0xb4, 0x08, 0xd2, 0xdb, 0xae,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x30, 0x7c, 0x5b, 0x8f, 0xcd, 0x05, 0x33, 0xab, 0x98, 0xbc, 0x51, 0xe2, 0x7a, 0x6c, 0xe4, 0x61,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x82, 0x9c, 0x04, 0xff, 0x4c, 0x07, 0x51, 0x3c, 0x0b, 0x3e, 0xf0, 0x5c, 0x03, 0xe3, 0x37, 0xb5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf1, 0x7a, 0xf0, 0xe8, 0x95, 0xdd, 0xa5, 0xeb, 0x98, 0xef, 0xc6, 0x80, 0x66, 0xe8, 0x4c, 0x54,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x27, 0x71, 0x67, 0xf3, 0x81, 0x2a, 0xff, 0xf1, 0xff, 0xac, 0xb4, 0xa9, 0x34, 0x37, 0x9f, 0xc3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2c, 0xb1, 0xdc, 0x3a, 0x9c, 0x72, 0x97, 0x2e, 0x42, 0x5a, 0xe2, 0xef, 0x3e, 0xb5, 0x97, 0xcd,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x36, 0xae, 0xaa, 0x3a, 0x21, 0x3e, 0x96, 0x8d, 0x4b, 0x5b, 0x67, 0x9d, 0x3a, 0x2c, 0x97, 0xfe,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x92, 0x41, 0xda, 0xca, 0x4f, 0xdd, 0x03, 0x4a, 0x82, 0x37, 0x2d, 0xb5, 0x0e, 0x1a, 0x0f, 0x3f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc1, 0x45, 0x74, 0xd9, 0xcd, 0x00, 0xcf, 0x2b, 0x5a, 0x7f, 0x77, 0xe5, 0x3c, 0xd5, 0x78, 0x85,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x79, 0x3d, 0xe3, 0x92, 0x36, 0x57, 0x0a, 0xba, 0x83, 0xab, 0x9b, 0x73, 0x7c, 0xb5, 0x21, 0xc9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x16, 0x59, 0x1c, 0x0f, 0x27, 0xd6, 0x0e, 0x29, 0xb8, 0x5a, 0x96, 0xc3, 0x38, 0x61, 0xa7, 0xef,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x44, 0xfb, 0x5c, 0x4d, 0x4f, 0x5c, 0xb7, 0x9b, 0xe5, 0xc1, 0x74, 0xa3, 0xb1, 0xc9, 0x73, 0x48,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x67, 0x4d, 0x2b, 0x61, 0x63, 0x3d, 0x16, 0x2b, 0xe5, 0x9d, 0xde, 0x04, 0x22, 0x2f, 0x47, 0x40,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb4, 0x75, 0x0f, 0xf2, 0x63, 0xa6, 0x5e, 0x1f, 0x9e, 0x92, 0x4c, 0xcf, 0xd9, 0x8f, 0x3e, 0x37,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x62, 0xd0, 0x66, 0x2d, 0x6e, 0xae, 0xdd, 0xed, 0xeb, 0xae, 0x7f, 0x7e, 0xa3, 0xa4, 0xf6, 0xb6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x70, 0xc4, 0x6b, 0xb3, 0x06, 0x92, 0xbe, 0x65, 0x7f, 0x7e, 0xaa, 0x93, 0xeb, 0xad, 0x98, 0x97,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x32, 0x39, 0x94, 0xcf, 0xb9, 0xda, 0x28, 0x5a, 0x5d, 0x96, 0x42, 0xe1, 0x75, 0x9b, 0x22, 0x4a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1d, 0xbf, 0x57, 0x87, 0x7b, 0x7b, 0x17, 0x38, 0x5c, 0x85, 0xd0, 0xb5, 0x48, 0x51, 0xe3, 0x71,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdf, 0xa5, 0xc0, 0x97, 0xcd, 0xc1, 0x53, 0x2a, 0xc0, 0x71, 0xd5, 0x7b, 0x1d, 0x28, 0xd1, 0xbd,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3a, 0x0c, 0x53, 0xfa, 0x37, 0x31, 0x1f, 0xc1, 0x0b, 0xd2, 0xa9, 0x98, 0x1f, 0x51, 0x31, 0x74,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xba, 0x4f, 0x97, 0x0c, 0x0a, 0x25, 0xc4, 0x18, 0x14, 0xbd, 0xae, 0x2e, 0x50, 0x6b, 0xe3, 0xb4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2d, 0xce, 0x3a, 0xcb, 0x72, 0x7c, 0xd1, 0x3c, 0xcd, 0x76, 0xd4, 0x25, 0xea, 0x56, 0xe4, 0xf6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x51, 0x60, 0x47, 0x4d, 0x50, 0x4b, 0x9b, 0x3e, 0xef, 0xb6, 0x8d, 0x35, 0xf2, 0x45, 0xf4, 0xb3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x41, 0xa8, 0xa9, 0x47, 0x76, 0x66, 0x35, 0xde, 0xc3, 0x75, 0x53, 0xd9, 0xa6, 0xc0, 0xcb, 0xb7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x25, 0xd6, 0xcf, 0xe6, 0x88, 0x1f, 0x2b, 0xf4, 0x97, 0xdd, 0x14, 0xcd, 0x4d, 0xdf, 0x44, 0x5b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x41, 0xc7, 0x8c, 0x13, 0x5e, 0xd9, 0xe9, 0x8c, 0x09, 0x66, 0x40, 0x64, 0x72, 0x65, 0xda, 0x1e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x5a, 0x4d, 0x40, 0x4d, 0x89, 0x17, 0xe3, 0x53, 0xe9, 0x2a, 0x21, 0x07, 0x2c, 0x3b, 0x23, 0x05,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x02, 0xbc, 0x96, 0x84, 0x6b, 0x3f, 0xdc, 0x71, 0x64, 0x3f, 0x38, 0x4c, 0xd3, 0xcc, 0x3e, 0xaf,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9b, 0xa4, 0xa9, 0x14, 0x3f, 0x4e, 0x5d, 0x40, 0x48, 0x52, 0x1c, 0x4f, 0x88, 0x77, 0xd8, 0x8e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[16]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa1, 0xf6, 0x25, 0x8c, 0x87, 0x7d, 0x5f, 0xcd, 0x89, 0x64, 0x48, 0x45, 0x38, 0xbf, 0xc9, 0x2c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!128)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
}

// VarKey Known Answer Test Values. Keysize = 256.
unittest
{
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe3, 0x5a, 0x6d, 0xcb, 0x19, 0xb2, 0x01, 0xa0, 0x1e, 0xbc, 0xfa, 0x8a, 0xa2, 0x2b, 0x57, 0x59,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb2, 0x91, 0x69, 0xcd, 0xcf, 0x2d, 0x83, 0xe8, 0x38, 0x12, 0x5a, 0x12, 0xee, 0x6a, 0xa4, 0x00,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd8, 0xf3, 0xa7, 0x2f, 0xc3, 0xcd, 0xf7, 0x4d, 0xfa, 0xf6, 0xc3, 0xe6, 0xb9, 0x7b, 0x2f, 0xa6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1c, 0x77, 0x76, 0x79, 0xd5, 0x00, 0x37, 0xc7, 0x94, 0x91, 0xa9, 0x4d, 0xa7, 0x6a, 0x9a, 0x35,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9c, 0xf4, 0x89, 0x3e, 0xca, 0xfa, 0x0a, 0x02, 0x47, 0xa8, 0x98, 0xe0, 0x40, 0x69, 0x15, 0x59,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8f, 0xbb, 0x41, 0x37, 0x03, 0x73, 0x53, 0x26, 0x31, 0x0a, 0x26, 0x9b, 0xd3, 0xaa, 0x94, 0xb2,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x60, 0xe3, 0x22, 0x46, 0xbe, 0xd2, 0xb0, 0xe8, 0x59, 0xe5, 0x5c, 0x1c, 0xc6, 0xb2, 0x65, 0x02,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xec, 0x52, 0xa2, 0x12, 0xf8, 0x0a, 0x09, 0xdf, 0x63, 0x17, 0x02, 0x1b, 0xc2, 0xa9, 0x81, 0x9e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf2, 0x3e, 0x5b, 0x60, 0x0e, 0xb7, 0x0d, 0xbc, 0xcf, 0x6c, 0x0b, 0x1d, 0x9a, 0x68, 0x18, 0x2c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa3, 0xf5, 0x99, 0xd6, 0x3a, 0x82, 0xa9, 0x68, 0xc3, 0x3f, 0xe2, 0x65, 0x90, 0x74, 0x59, 0x70,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd1, 0xcc, 0xb9, 0xb1, 0x33, 0x70, 0x02, 0xcb, 0xac, 0x42, 0xc5, 0x20, 0xb5, 0xd6, 0x77, 0x22,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xcc, 0x11, 0x1f, 0x6c, 0x37, 0xcf, 0x40, 0xa1, 0x15, 0x9d, 0x00, 0xfb, 0x59, 0xfb, 0x04, 0x88,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdc, 0x43, 0xb5, 0x1a, 0xb6, 0x09, 0x05, 0x23, 0x72, 0x98, 0x9a, 0x26, 0xe9, 0xcd, 0xd7, 0x14,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x4d, 0xce, 0xde, 0x8d, 0xa9, 0xe2, 0x57, 0x8f, 0x39, 0x70, 0x3d, 0x44, 0x33, 0xdc, 0x64, 0x59,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1a, 0x4c, 0x1c, 0x26, 0x3b, 0xbc, 0xcf, 0xaf, 0xc1, 0x17, 0x82, 0x89, 0x46, 0x85, 0xe3, 0xa8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x93, 0x7a, 0xd8, 0x48, 0x80, 0xdb, 0x50, 0x61, 0x34, 0x23, 0xd6, 0xd5, 0x27, 0xa2, 0x82, 0x3d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x61, 0x0b, 0x71, 0xdf, 0xc6, 0x88, 0xe1, 0x50, 0xd8, 0x15, 0x2c, 0x5b, 0x35, 0xeb, 0xc1, 0x4d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x27, 0xef, 0x24, 0x95, 0xda, 0xbf, 0x32, 0x38, 0x85, 0xaa, 0xb3, 0x9c, 0x80, 0xf1, 0x8d, 0x8b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x63, 0x3c, 0xaf, 0xea, 0x39, 0x5b, 0xc0, 0x3a, 0xda, 0xe3, 0xa1, 0xe2, 0x06, 0x8e, 0x4b, 0x4e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6e, 0x1b, 0x48, 0x2b, 0x53, 0x76, 0x1c, 0xf6, 0x31, 0x81, 0x9b, 0x74, 0x9a, 0x6f, 0x37, 0x24,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x97, 0x6e, 0x6f, 0x85, 0x1a, 0xb5, 0x2c, 0x77, 0x19, 0x98, 0xdb, 0xb2, 0xd7, 0x1c, 0x75, 0xa9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x85, 0xf2, 0xba, 0x84, 0xf8, 0xc3, 0x07, 0xcf, 0x52, 0x5e, 0x12, 0x4c, 0x3e, 0x22, 0xe6, 0xcc,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6b, 0xcc, 0xa9, 0x8b, 0xf6, 0xa8, 0x35, 0xfa, 0x64, 0x95, 0x5f, 0x72, 0xde, 0x41, 0x15, 0xfe,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2c, 0x75, 0xe2, 0xd3, 0x6e, 0xeb, 0xd6, 0x54, 0x11, 0xf1, 0x4f, 0xd0, 0xeb, 0x1d, 0x2a, 0x06,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xbd, 0x49, 0x29, 0x50, 0x06, 0x25, 0x0f, 0xfc, 0xa5, 0x10, 0x0b, 0x60, 0x07, 0xa0, 0xea, 0xde,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa1, 0x90, 0x52, 0x7d, 0x0e, 0xf7, 0xc7, 0x0f, 0x45, 0x9c, 0xd3, 0x94, 0x0d, 0xf3, 0x16, 0xec,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xbb, 0xd1, 0x09, 0x7a, 0x62, 0x43, 0x3f, 0x79, 0x44, 0x9f, 0xa9, 0x7d, 0x4e, 0xe8, 0x0d, 0xbf,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x07, 0x05, 0x8e, 0x40, 0x8f, 0x5b, 0x99, 0xb0, 0xe0, 0xf0, 0x61, 0xa1, 0x76, 0x1b, 0x5b, 0x3b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x5f, 0xd1, 0xf1, 0x3f, 0xa0, 0xf3, 0x1e, 0x37, 0xfa, 0xbd, 0xe3, 0x28, 0xf8, 0x94, 0xea, 0xc2,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xfc, 0x4a, 0xf7, 0xc9, 0x48, 0xdf, 0x26, 0xe2, 0xef, 0x3e, 0x01, 0xc1, 0xee, 0x5b, 0x8f, 0x6f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x82, 0x9f, 0xd7, 0x20, 0x8f, 0xb9, 0x2d, 0x44, 0xa0, 0x74, 0xa6, 0x77, 0xee, 0x98, 0x61, 0xac,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xad, 0x9f, 0xc6, 0x13, 0xa7, 0x03, 0x25, 0x1b, 0x54, 0xc6, 0x4a, 0x0e, 0x76, 0x43, 0x17, 0x11,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x33, 0xac, 0x9e, 0xcc, 0xc4, 0xcc, 0x75, 0xe2, 0x71, 0x16, 0x18, 0xf8, 0x0b, 0x15, 0x48, 0xe8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x20, 0x25, 0xc7, 0x4b, 0x8a, 0xd8, 0xf4, 0xcd, 0xa1, 0x7e, 0xe2, 0x04, 0x9c, 0x4c, 0x90, 0x2d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf8, 0x5c, 0xa0, 0x5f, 0xe5, 0x28, 0xf1, 0xce, 0x9b, 0x79, 0x01, 0x66, 0xe8, 0xd5, 0x51, 0xe7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6f, 0x62, 0x38, 0xd8, 0x96, 0x60, 0x48, 0xd4, 0x96, 0x71, 0x54, 0xe0, 0xda, 0xd5, 0xa6, 0xc9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf2, 0xb2, 0x1b, 0x4e, 0x76, 0x40, 0xa9, 0xb3, 0x34, 0x6d, 0xe8, 0xb8, 0x2f, 0xb4, 0x1e, 0x49,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf8, 0x36, 0xf2, 0x51, 0xad, 0x1d, 0x11, 0xd4, 0x9d, 0xc3, 0x44, 0x62, 0x8b, 0x18, 0x84, 0xe1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x07, 0x7e, 0x94, 0x70, 0xae, 0x7a, 0xbe, 0xa5, 0xa9, 0x76, 0x9d, 0x49, 0x18, 0x26, 0x28, 0xc3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe0, 0xdc, 0xc2, 0xd2, 0x7f, 0xc9, 0x86, 0x56, 0x33, 0xf8, 0x52, 0x23, 0xcf, 0x0d, 0x61, 0x1f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xbe, 0x66, 0xcf, 0xea, 0x2f, 0xec, 0xd6, 0xbf, 0x0e, 0xc7, 0xb4, 0x35, 0x2c, 0x99, 0xbc, 0xaa,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdf, 0x31, 0x14, 0x4f, 0x87, 0xa2, 0xef, 0x52, 0x3f, 0xac, 0xdc, 0xf2, 0x1a, 0x42, 0x78, 0x04,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb5, 0xbb, 0x0f, 0x56, 0x29, 0xfb, 0x6a, 0xae, 0x5e, 0x18, 0x39, 0xa3, 0xc3, 0x62, 0x5d, 0x63,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3c, 0x9d, 0xb3, 0x33, 0x53, 0x06, 0xfe, 0x1e, 0xc6, 0x12, 0xbd, 0xbf, 0xae, 0x6b, 0x60, 0x28,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3d, 0xd5, 0xc3, 0x46, 0x34, 0xa7, 0x9d, 0x3c, 0xfc, 0xc8, 0x33, 0x97, 0x60, 0xe6, 0xf5, 0xf4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x82, 0xbd, 0xa1, 0x18, 0xa3, 0xed, 0x7a, 0xf3, 0x14, 0xfa, 0x2c, 0xcc, 0x5c, 0x07, 0xb7, 0x61,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x29, 0x37, 0xa6, 0x4f, 0x7d, 0x4f, 0x46, 0xfe, 0x6f, 0xea, 0x3b, 0x34, 0x9e, 0xc7, 0x8e, 0x38,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x22, 0x5f, 0x06, 0x8c, 0x28, 0x47, 0x66, 0x05, 0x73, 0x5a, 0xd6, 0x71, 0xbb, 0x8f, 0x39, 0xf3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xae, 0x68, 0x2c, 0x5e, 0xcd, 0x71, 0x89, 0x8e, 0x08, 0x94, 0x2a, 0xc9, 0xaa, 0x89, 0x87, 0x5c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x5e, 0x03, 0x1c, 0xb9, 0xd6, 0x76, 0xc3, 0x02, 0x2d, 0x7f, 0x26, 0x22, 0x7e, 0x85, 0xc3, 0x8f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa7, 0x84, 0x63, 0xfb, 0x06, 0x4d, 0xb5, 0xd5, 0x2b, 0xb6, 0x4b, 0xfe, 0xf6, 0x4f, 0x2d, 0xda,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8a, 0xa9, 0xb7, 0x5e, 0x78, 0x45, 0x93, 0x87, 0x6c, 0x53, 0xa0, 0x0e, 0xae, 0x5a, 0xf5, 0x2b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3f, 0x84, 0x56, 0x6d, 0xf2, 0x3d, 0xa4, 0x8a, 0xf6, 0x92, 0x72, 0x2f, 0xe9, 0x80, 0x57, 0x3a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x31, 0x69, 0x0b, 0x5e, 0xd4, 0x1c, 0x7e, 0xb4, 0x2a, 0x1e, 0x83, 0x27, 0x0a, 0x7f, 0xf0, 0xe6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x77, 0xdd, 0x77, 0x02, 0x64, 0x6d, 0x55, 0xf0, 0x83, 0x65, 0xe4, 0x77, 0xd3, 0x59, 0x0e, 0xda,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x4c, 0x02, 0x2a, 0xc6, 0x2b, 0x3c, 0xb7, 0x8d, 0x73, 0x9c, 0xc6, 0x7b, 0x3e, 0x20, 0xbb, 0x7e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x09, 0x2f, 0xa1, 0x37, 0xce, 0x18, 0xb5, 0xdf, 0xe7, 0x90, 0x6f, 0x55, 0x0b, 0xb1, 0x33, 0x70,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3e, 0x0c, 0xda, 0xdf, 0x2e, 0x68, 0x35, 0x3c, 0x00, 0x27, 0x67, 0x2c, 0x97, 0x14, 0x4d, 0xd3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd8, 0xc4, 0xb2, 0x00, 0xb3, 0x83, 0xfc, 0x1f, 0x2b, 0x2e, 0xa6, 0x77, 0x61, 0x8a, 0x1d, 0x27,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x11, 0x82, 0x5f, 0x99, 0xb0, 0xe9, 0xbb, 0x34, 0x77, 0xc1, 0xc0, 0x71, 0x3b, 0x01, 0x5a, 0xac,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf8, 0xb9, 0xff, 0xfb, 0x5c, 0x18, 0x7f, 0x7d, 0xdc, 0x7a, 0xb1, 0x0f, 0x4f, 0xb7, 0x75, 0x76,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xff, 0xb4, 0xe8, 0x7a, 0x32, 0xb3, 0x7d, 0x6f, 0x2c, 0x83, 0x28, 0xd3, 0xb5, 0x37, 0x78, 0x02,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd2, 0x76, 0xc1, 0x3a, 0x5d, 0x22, 0x0f, 0x4d, 0xa9, 0x22, 0x4e, 0x74, 0x89, 0x63, 0x91, 0xce,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x94, 0xef, 0xe7, 0xa0, 0xe2, 0xe0, 0x31, 0xe2, 0x53, 0x6d, 0xa0, 0x1d, 0xf7, 0x99, 0xc9, 0x27,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8f, 0x8f, 0xd8, 0x22, 0x68, 0x0a, 0x85, 0x97, 0x4e, 0x53, 0xa5, 0xa8, 0xeb, 0x9d, 0x38, 0xde,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe0, 0xf0, 0xa9, 0x1b, 0x2e, 0x45, 0xf8, 0xcc, 0x37, 0xb7, 0x80, 0x5a, 0x30, 0x42, 0x58, 0x8d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x59, 0x7a, 0x62, 0x52, 0x25, 0x5e, 0x46, 0xd6, 0x36, 0x4d, 0xbe, 0xed, 0xa3, 0x1e, 0x27, 0x9c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf5, 0x1a, 0x0f, 0x69, 0x44, 0x42, 0xb8, 0xf0, 0x55, 0x71, 0x79, 0x7f, 0xec, 0x7e, 0xe8, 0xbf,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9f, 0xf0, 0x71, 0xb1, 0x65, 0xb5, 0x19, 0x8a, 0x93, 0xdd, 0xde, 0xeb, 0xc5, 0x4d, 0x09, 0xb5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc2, 0x0a, 0x19, 0xfd, 0x57, 0x58, 0xb0, 0xc4, 0xbc, 0x1a, 0x5d, 0xf8, 0x9c, 0xf7, 0x38, 0x77,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x97, 0x12, 0x01, 0x66, 0x30, 0x71, 0x19, 0xca, 0x22, 0x80, 0xe9, 0x31, 0x56, 0x68, 0xe9, 0x6f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x4b, 0x3b, 0x9f, 0x1e, 0x09, 0x9c, 0x2a, 0x09, 0xdc, 0x09, 0x1e, 0x90, 0xe4, 0xf1, 0x8f, 0x0a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xeb, 0x04, 0x0b, 0x89, 0x1d, 0x4b, 0x37, 0xf6, 0x85, 0x1f, 0x7e, 0xc2, 0x19, 0xcd, 0x3f, 0x6d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9f, 0x0f, 0xde, 0xc0, 0x8b, 0x7f, 0xd7, 0x9a, 0xa3, 0x95, 0x35, 0xbe, 0xa4, 0x2d, 0xb9, 0x2a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2e, 0x70, 0xf1, 0x68, 0xfc, 0x74, 0xbf, 0x91, 0x1d, 0xf2, 0x40, 0xbc, 0xd2, 0xce, 0xf2, 0x36,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x46, 0x2c, 0xcd, 0x7f, 0x5f, 0xd1, 0x10, 0x8d, 0xbc, 0x15, 0x2f, 0x3c, 0xac, 0xad, 0x32, 0x8b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa4, 0xaf, 0x53, 0x4a, 0x7d, 0x0b, 0x64, 0x3a, 0x01, 0x86, 0x87, 0x85, 0xd8, 0x6d, 0xfb, 0x95,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xab, 0x98, 0x02, 0x96, 0x19, 0x7e, 0x1a, 0x50, 0x22, 0x32, 0x6c, 0x31, 0xda, 0x4b, 0xf6, 0xf3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf9, 0x7d, 0x57, 0xb3, 0x33, 0x3b, 0x62, 0x81, 0xb0, 0x7d, 0x48, 0x6d, 0xb2, 0xd4, 0xe2, 0x0c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf3, 0x3f, 0xa3, 0x67, 0x20, 0x23, 0x1a, 0xfe, 0x4c, 0x75, 0x9a, 0xde, 0x6b, 0xd6, 0x2e, 0xb6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xfd, 0xcf, 0xac, 0x0c, 0x02, 0xca, 0x53, 0x83, 0x43, 0xc6, 0x81, 0x17, 0xe0, 0xa1, 0x59, 0x38,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xad, 0x49, 0x16, 0xf5, 0xee, 0x57, 0x72, 0xbe, 0x76, 0x4f, 0xc0, 0x27, 0xb8, 0xa6, 0xe5, 0x39,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2e, 0x16, 0x87, 0x3e, 0x16, 0x78, 0x61, 0x0d, 0x7e, 0x14, 0xc0, 0x2d, 0x00, 0x2e, 0xa8, 0x45,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x4e, 0x6e, 0x62, 0x7c, 0x1a, 0xcc, 0x51, 0x34, 0x00, 0x53, 0xa8, 0x23, 0x6d, 0x57, 0x95, 0x76,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xab, 0x0c, 0x84, 0x10, 0xae, 0xee, 0xad, 0x92, 0xfe, 0xec, 0x1e, 0xb4, 0x30, 0xd6, 0x52, 0xcb,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe8, 0x6f, 0x7e, 0x23, 0xe8, 0x35, 0xe1, 0x14, 0x97, 0x7f, 0x60, 0xe1, 0xa5, 0x92, 0x20, 0x2e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe6, 0x8a, 0xd5, 0x05, 0x5a, 0x36, 0x70, 0x41, 0xfa, 0xde, 0x09, 0xd9, 0xa7, 0x0a, 0x79, 0x4b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x07, 0x91, 0x82, 0x3a, 0x3c, 0x66, 0x6b, 0xb6, 0x16, 0x28, 0x25, 0xe7, 0x86, 0x06, 0xa7, 0xfe,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdc, 0xca, 0x36, 0x6a, 0x9b, 0xf4, 0x7b, 0x7b, 0x86, 0x8b, 0x77, 0xe2, 0x5c, 0x18, 0xa3, 0x64,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x68, 0x4c, 0x9e, 0xfc, 0x23, 0x7e, 0x4a, 0x44, 0x29, 0x65, 0xf8, 0x4b, 0xce, 0x20, 0x24, 0x7a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa8, 0x58, 0x41, 0x1f, 0xfb, 0xe6, 0x3f, 0xdb, 0x9c, 0x8a, 0xa1, 0xbf, 0xae, 0xd6, 0x7b, 0x52,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x04, 0xbc, 0x3d, 0xa2, 0x17, 0x9c, 0x30, 0x15, 0x49, 0x8b, 0x0e, 0x03, 0x91, 0x0d, 0xb5, 0xb8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x40, 0x07, 0x1e, 0xea, 0xb3, 0xf9, 0x35, 0xdb, 0xc2, 0x5d, 0x00, 0x84, 0x14, 0x60, 0x26, 0x0f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x0e, 0xbd, 0x7c, 0x30, 0xed, 0x20, 0x16, 0xe0, 0x8b, 0xa8, 0x06, 0xdd, 0xb0, 0x08, 0xbc, 0xc8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x15, 0xc6, 0xbe, 0xcf, 0x0f, 0x4c, 0xec, 0x71, 0x29, 0xcb, 0xd2, 0x2d, 0x1a, 0x79, 0xb1, 0xb8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x0a, 0xee, 0xde, 0x5b, 0x91, 0xf7, 0x21, 0x70, 0x0e, 0x9e, 0x62, 0xed, 0xbf, 0x60, 0xb7, 0x81,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x26, 0x65, 0x81, 0xaf, 0x0d, 0xcf, 0xbe, 0xd1, 0x58, 0x5e, 0x0a, 0x24, 0x2c, 0x64, 0xb8, 0xdf,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x66, 0x93, 0xdc, 0x91, 0x16, 0x62, 0xae, 0x47, 0x32, 0x16, 0xba, 0x22, 0x18, 0x9a, 0x51, 0x1a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x76, 0x06, 0xfa, 0x36, 0xd8, 0x64, 0x73, 0xe6, 0xfb, 0x3a, 0x1b, 0xb0, 0xe2, 0xc0, 0xad, 0xf5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x11, 0x20, 0x78, 0xe9, 0xe1, 0x1f, 0xbb, 0x78, 0xe2, 0x6f, 0xfb, 0x88, 0x99, 0xe9, 0x6b, 0x9a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x40, 0xb2, 0x64, 0xe9, 0x21, 0xe9, 0xe4, 0xa8, 0x26, 0x94, 0x58, 0x9e, 0xf3, 0x79, 0x82, 0x62,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8d, 0x45, 0x95, 0xcb, 0x4f, 0xa7, 0x02, 0x67, 0x15, 0xf5, 0x5b, 0xd6, 0x8e, 0x28, 0x82, 0xf9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb5, 0x88, 0xa3, 0x02, 0xbd, 0xbc, 0x09, 0x19, 0x7d, 0xf1, 0xed, 0xae, 0x68, 0x92, 0x6e, 0xd9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x33, 0xf7, 0x50, 0x23, 0x90, 0xb8, 0xa4, 0xa2, 0x21, 0xcf, 0xec, 0xd0, 0x66, 0x66, 0x24, 0xba,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3d, 0x20, 0x25, 0x3a, 0xdb, 0xce, 0x3b, 0xe2, 0x37, 0x37, 0x67, 0xc4, 0xd8, 0x22, 0xc5, 0x66,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa4, 0x27, 0x34, 0xa3, 0x92, 0x9b, 0xf8, 0x4c, 0xf0, 0x11, 0x6c, 0x98, 0x56, 0xa3, 0xc1, 0x8c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe3, 0xab, 0xc4, 0x93, 0x94, 0x57, 0x42, 0x2b, 0xb9, 0x57, 0xda, 0x3c, 0x56, 0x93, 0x8c, 0x6d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x97, 0x2b, 0xdd, 0x2e, 0x7c, 0x52, 0x51, 0x30, 0xfa, 0xdc, 0x8f, 0x76, 0xfc, 0x6f, 0x4b, 0x3f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x84, 0xa8, 0x3d, 0x7b, 0x94, 0xc6, 0x99, 0xcb, 0xcb, 0x8a, 0x7d, 0x9b, 0x61, 0xf6, 0x40, 0x93,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xce, 0x61, 0xd6, 0x35, 0x14, 0xad, 0xed, 0x03, 0xd4, 0x3e, 0x6e, 0xbf, 0xc3, 0xa9, 0x00, 0x1f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6c, 0x83, 0x9d, 0xd5, 0x8e, 0xea, 0xe6, 0xb8, 0xa3, 0x6a, 0xf4, 0x8e, 0xd6, 0x3d, 0x2d, 0xc9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xcd, 0x5e, 0xce, 0x55, 0xb8, 0xda, 0x3b, 0xf6, 0x22, 0xc4, 0x10, 0x0d, 0xf5, 0xde, 0x46, 0xf9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3b, 0x6f, 0x46, 0xf4, 0x0e, 0x0a, 0xc5, 0xfc, 0x0a, 0x9c, 0x11, 0x05, 0xf8, 0x00, 0xf4, 0x8d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xba, 0x26, 0xd4, 0x7d, 0xa3, 0xae, 0xb0, 0x28, 0xde, 0x4f, 0xb5, 0xb3, 0xa8, 0x54, 0xa2, 0x4b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x87, 0xf5, 0x3b, 0xf6, 0x20, 0xd3, 0x67, 0x72, 0x68, 0x44, 0x52, 0x12, 0x90, 0x43, 0x89, 0xd5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x10, 0x61, 0x7d, 0x28, 0xb5, 0xe0, 0xf4, 0x60, 0x54, 0x92, 0xb1, 0x82, 0xa5, 0xd7, 0xf9, 0xf6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9a, 0xae, 0xc4, 0xfa, 0xbb, 0xf6, 0xfa, 0xe2, 0xa7, 0x1f, 0xef, 0xf0, 0x2e, 0x37, 0x2b, 0x39,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3a, 0x90, 0xc6, 0x2d, 0x88, 0xb5, 0xc4, 0x28, 0x09, 0xab, 0xf7, 0x82, 0x48, 0x8e, 0xd1, 0x30,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xf1, 0xf1, 0xc5, 0xa4, 0x08, 0x99, 0xe1, 0x57, 0x72, 0x85, 0x7c, 0xcb, 0x65, 0xc7, 0xa0, 0x9a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x19, 0x08, 0x43, 0xd2, 0x9b, 0x25, 0xa3, 0x89, 0x7c, 0x69, 0x2c, 0xe1, 0xdd, 0x81, 0xee, 0x52,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa8, 0x66, 0xbc, 0x65, 0xb6, 0x94, 0x1d, 0x86, 0xe8, 0x42, 0x0a, 0x7f, 0xfb, 0x09, 0x64, 0xdb,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x81, 0x93, 0xc6, 0xff, 0x85, 0x22, 0x5c, 0xed, 0x42, 0x55, 0xe9, 0x2f, 0x6e, 0x07, 0x8a, 0x14,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x96, 0x61, 0xcb, 0x24, 0x24, 0xd7, 0xd4, 0xa3, 0x80, 0xd5, 0x47, 0xf9, 0xe7, 0xec, 0x1c, 0xb9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x86, 0xf9, 0x3d, 0x9e, 0xc0, 0x84, 0x53, 0xa0, 0x71, 0xe2, 0xe2, 0x87, 0x78, 0x77, 0xa9, 0xc8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x27, 0xee, 0xfa, 0x80, 0xce, 0x6a, 0x4a, 0x9d, 0x59, 0x8e, 0x3f, 0xec, 0x36, 0x54, 0x34, 0xd2,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd6, 0x20, 0x68, 0x44, 0x45, 0x78, 0xe3, 0xab, 0x39, 0xce, 0x7e, 0xc9, 0x5d, 0xd0, 0x45, 0xdc,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb5, 0xf7, 0x1d, 0x4d, 0xd9, 0xa7, 0x1f, 0xe5, 0xd8, 0xbc, 0x8b, 0xa7, 0xe6, 0xea, 0x30, 0x48,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x68, 0x25, 0xa3, 0x47, 0xac, 0x47, 0x9d, 0x4f, 0x9d, 0x95, 0xc5, 0xcb, 0x8d, 0x3f, 0xd7, 0xe9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe3, 0x71, 0x4e, 0x94, 0xa5, 0x77, 0x89, 0x55, 0xcc, 0x03, 0x46, 0x35, 0x8e, 0x94, 0x78, 0x3a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd8, 0x36, 0xb4, 0x4b, 0xb2, 0x9e, 0x0c, 0x7d, 0x89, 0xfa, 0x4b, 0x2d, 0x4b, 0x67, 0x7d, 0x2a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x5d, 0x45, 0x4b, 0x75, 0x02, 0x1d, 0x76, 0xd4, 0xb8, 0x4f, 0x87, 0x3a, 0x8f, 0x87, 0x7b, 0x92,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc3, 0x49, 0x8f, 0x7e, 0xce, 0xd2, 0x09, 0x53, 0x14, 0xfc, 0x28, 0x11, 0x58, 0x85, 0xb3, 0x3f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6e, 0x66, 0x88, 0x56, 0x53, 0x9a, 0xd8, 0xe4, 0x05, 0xbd, 0x12, 0x3f, 0xe6, 0xc8, 0x85, 0x30,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x86, 0x80, 0xdb, 0x7f, 0x3a, 0x87, 0xb8, 0x60, 0x55, 0x43, 0xcf, 0xdb, 0xe6, 0x75, 0x40, 0x76,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6c, 0x5d, 0x03, 0xb1, 0x30, 0x69, 0xc3, 0x65, 0x8b, 0x31, 0x79, 0xbe, 0x91, 0xb0, 0x80, 0x0c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xef, 0x1b, 0x38, 0x4a, 0xc4, 0xd9, 0x3e, 0xda, 0x00, 0xc9, 0x2a, 0xdd, 0x09, 0x95, 0xea, 0x5f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xbf, 0x81, 0x15, 0x80, 0x54, 0x71, 0x74, 0x1b, 0xd5, 0xad, 0x20, 0xa0, 0x39, 0x44, 0x79, 0x0f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc6, 0x4c, 0x24, 0xb6, 0x89, 0x4b, 0x03, 0x8b, 0x3c, 0x0d, 0x09, 0xb1, 0xdf, 0x06, 0x8b, 0x0b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x39, 0x67, 0xa1, 0x0c, 0xff, 0xe2, 0x7d, 0x01, 0x78, 0x54, 0x5f, 0xbf, 0x6a, 0x40, 0x54, 0x4b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7c, 0x85, 0xe9, 0xc9, 0x5d, 0xe1, 0xa9, 0xec, 0x5a, 0x53, 0x63, 0xa8, 0xa0, 0x53, 0x47, 0x2d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa9, 0xee, 0xc0, 0x3c, 0x8a, 0xbe, 0xc7, 0xba, 0x68, 0x31, 0x5c, 0x2c, 0x8c, 0x23, 0x16, 0xe0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xca, 0xc8, 0xe4, 0x14, 0xc2, 0xf3, 0x88, 0x22, 0x7a, 0xe1, 0x49, 0x86, 0xfc, 0x98, 0x35, 0x24,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x5d, 0x94, 0x2b, 0x7f, 0x46, 0x22, 0xce, 0x05, 0x6c, 0x3c, 0xe3, 0xce, 0x5f, 0x1d, 0xd9, 0xd6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd2, 0x40, 0xd6, 0x48, 0xce, 0x21, 0xa3, 0x02, 0x02, 0x82, 0xc3, 0xf1, 0xb5, 0x28, 0xa0, 0xb6,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x45, 0xd0, 0x89, 0xc3, 0x6d, 0x5c, 0x5a, 0x4e, 0xfc, 0x68, 0x9e, 0x3b, 0x0d, 0xe1, 0x0d, 0xd5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb4, 0xda, 0x5d, 0xf4, 0xbe, 0xcb, 0x54, 0x62, 0xe0, 0x3a, 0x0e, 0xd0, 0x0d, 0x29, 0x56, 0x29,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdc, 0xf4, 0xe1, 0x29, 0x13, 0x6c, 0x1a, 0x4b, 0x7a, 0x0f, 0x38, 0x93, 0x5c, 0xc3, 0x4b, 0x2b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd9, 0xa4, 0xc7, 0x61, 0x8b, 0x0c, 0xe4, 0x8a, 0x3d, 0x5a, 0xee, 0x1a, 0x1c, 0x01, 0x14, 0xc4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xca, 0x35, 0x2d, 0xf0, 0x25, 0xc6, 0x5c, 0x7b, 0x0b, 0xf3, 0x06, 0xfb, 0xee, 0x0f, 0x36, 0xba,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x23, 0x8a, 0xca, 0x23, 0xfd, 0x34, 0x09, 0xf3, 0x8a, 0xf6, 0x33, 0x78, 0xed, 0x2f, 0x54, 0x73,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x59, 0x83, 0x6a, 0x0e, 0x06, 0xa7, 0x96, 0x91, 0xb3, 0x66, 0x67, 0xd5, 0x38, 0x0d, 0x81, 0x88,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x33, 0x90, 0x50, 0x80, 0xf7, 0xac, 0xf1, 0xcd, 0xae, 0x0a, 0x91, 0xfc, 0x3e, 0x85, 0xae, 0xe4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x72, 0xc9, 0xe4, 0x64, 0x6d, 0xbc, 0x3d, 0x63, 0x20, 0xfc, 0x66, 0x89, 0xd9, 0x3e, 0x88, 0x33,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xba, 0x77, 0x41, 0x3d, 0xea, 0x59, 0x25, 0xb7, 0xf5, 0x41, 0x7e, 0xa4, 0x7f, 0xf1, 0x9f, 0x59,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6c, 0xae, 0x81, 0x29, 0xf8, 0x43, 0xd8, 0x6d, 0xc7, 0x86, 0xa0, 0xfb, 0x1a, 0x18, 0x49, 0x70,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xfc, 0xfe, 0xfb, 0x53, 0x41, 0x00, 0x79, 0x6e, 0xeb, 0xbd, 0x99, 0x02, 0x06, 0x75, 0x4e, 0x19,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8c, 0x79, 0x1d, 0x5f, 0xdd, 0xdf, 0x47, 0x0d, 0xa0, 0x4f, 0x3e, 0x6d, 0xc4, 0xa5, 0xb5, 0xb5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc9, 0x3b, 0xbd, 0xc0, 0x7a, 0x46, 0x11, 0xae, 0x4b, 0xb2, 0x66, 0xea, 0x50, 0x34, 0xa3, 0x87,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc1, 0x02, 0xe3, 0x8e, 0x48, 0x9a, 0xa7, 0x47, 0x62, 0xf3, 0xef, 0xc5, 0xbb, 0x23, 0x20, 0x5a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x93, 0x20, 0x14, 0x81, 0x66, 0x5c, 0xba, 0xfc, 0x1f, 0xcc, 0x22, 0x0b, 0xc5, 0x45, 0xfb, 0x3d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x49, 0x60, 0x75, 0x7e, 0xc6, 0xce, 0x68, 0xcf, 0x19, 0x5e, 0x45, 0x4c, 0xfd, 0x0f, 0x32, 0xca,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xfe, 0xec, 0x7c, 0xe6, 0xa6, 0xcb, 0xd0, 0x7c, 0x04, 0x34, 0x16, 0x73, 0x7f, 0x1b, 0xbb, 0x33,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x11, 0xc5, 0x41, 0x39, 0x04, 0x48, 0x7a, 0x80, 0x5d, 0x70, 0xa8, 0xed, 0xd9, 0xc3, 0x55, 0x27,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x34, 0x78, 0x46, 0xb2, 0xb2, 0xe3, 0x6f, 0x1f, 0x03, 0x24, 0xc8, 0x6f, 0x7f, 0x1b, 0x98, 0xe2,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x33, 0x2e, 0xee, 0x1a, 0x0c, 0xbd, 0x19, 0xca, 0x2d, 0x69, 0xb4, 0x26, 0x89, 0x40, 0x44, 0xf0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x86, 0x6b, 0x5b, 0x39, 0x77, 0xba, 0x6e, 0xfa, 0x51, 0x28, 0xef, 0xbd, 0xa9, 0xff, 0x03, 0xcd,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xcc, 0x14, 0x45, 0xee, 0x94, 0xc0, 0xf0, 0x8c, 0xde, 0xe5, 0xc3, 0x44, 0xec, 0xd1, 0xe2, 0x33,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xbe, 0x28, 0x83, 0x19, 0x02, 0x93, 0x63, 0xc2, 0x62, 0x2f, 0xeb, 0xa4, 0xb0, 0x5d, 0xfd, 0xfe,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xcf, 0xd1, 0x87, 0x55, 0x23, 0xf3, 0xcd, 0x21, 0xc3, 0x95, 0x65, 0x1e, 0x6e, 0xe1, 0x5e, 0x56,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xcb, 0x5a, 0x40, 0x86, 0x57, 0x83, 0x7c, 0x53, 0xbf, 0x16, 0xf9, 0xd8, 0x46, 0x5d, 0xce, 0x19,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xca, 0x0b, 0xf4, 0x2c, 0xb1, 0x07, 0xf5, 0x5c, 0xcf, 0xf2, 0xfc, 0x09, 0xee, 0x08, 0xca, 0x15,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xfd, 0xd9, 0xbb, 0xb4, 0xa7, 0xdc, 0x2e, 0x4a, 0x23, 0x53, 0x6a, 0x58, 0x80, 0xa2, 0xdb, 0x67,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xed, 0xe4, 0x47, 0xb3, 0x62, 0xc4, 0x84, 0x99, 0x3d, 0xec, 0x94, 0x42, 0xa3, 0xb4, 0x6a, 0xef,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x10, 0xdf, 0xfb, 0x05, 0x90, 0x4b, 0xff, 0x7c, 0x47, 0x81, 0xdf, 0x78, 0x0a, 0xd2, 0x68, 0x37,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc3, 0x3b, 0xc1, 0x3e, 0x8d, 0xe8, 0x8a, 0xc2, 0x52, 0x32, 0xaa, 0x74, 0x96, 0x39, 0x87, 0x83,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xca, 0x35, 0x9c, 0x70, 0x80, 0x3a, 0x3b, 0x2a, 0x3d, 0x54, 0x2e, 0x87, 0x81, 0xde, 0xa9, 0x75,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xbc, 0xc6, 0x5b, 0x52, 0x6f, 0x88, 0xd0, 0x5b, 0x89, 0xce, 0x8a, 0x52, 0x02, 0x1f, 0xdb, 0x06,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdb, 0x91, 0xa3, 0x88, 0x55, 0xc8, 0xc4, 0x64, 0x38, 0x51, 0xfb, 0xfb, 0x35, 0x8b, 0x01, 0x09,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xca, 0x6e, 0x88, 0x93, 0xa1, 0x14, 0xae, 0x8e, 0x27, 0xd5, 0xab, 0x03, 0xa5, 0x49, 0x96, 0x10,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x66, 0x29, 0xd2, 0xb8, 0xdf, 0x97, 0xda, 0x72, 0x8c, 0xdd, 0x8b, 0x1e, 0x7f, 0x94, 0x50, 0x77,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x45, 0x70, 0xa5, 0xa1, 0x8c, 0xfc, 0x0d, 0xd5, 0x82, 0xf1, 0xd8, 0x8d, 0x5c, 0x9a, 0x17, 0x20,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x72, 0xbc, 0x65, 0xaa, 0x8e, 0x89, 0x56, 0x2e, 0x3f, 0x27, 0x4d, 0x45, 0xaf, 0x1c, 0xd1, 0x0b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x98, 0x55, 0x1d, 0xa1, 0xa6, 0x50, 0x32, 0x76, 0xae, 0x1c, 0x77, 0x62, 0x5f, 0x9e, 0xa6, 0x15,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x0d, 0xdf, 0xe5, 0x1c, 0xed, 0x7e, 0x3f, 0x4a, 0xe9, 0x27, 0xda, 0xa3, 0xfe, 0x45, 0x2c, 0xee,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xdb, 0x82, 0x62, 0x51, 0xe4, 0xce, 0x38, 0x4b, 0x80, 0x21, 0x8b, 0x0e, 0x1d, 0xa1, 0xdd, 0x4c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2c, 0xac, 0xf7, 0x28, 0xb8, 0x8a, 0xbb, 0xad, 0x70, 0x11, 0xed, 0x0e, 0x64, 0xa1, 0x68, 0x0c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x33, 0x0d, 0x8e, 0xe7, 0xc5, 0x67, 0x7e, 0x09, 0x9a, 0xc7, 0x4c, 0x99, 0x94, 0xee, 0x4c, 0xfb,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xed, 0xf6, 0x1a, 0xe3, 0x62, 0xe8, 0x82, 0xdd, 0xc0, 0x16, 0x74, 0x74, 0xa7, 0xa7, 0x7f, 0x3a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x61, 0x68, 0xb0, 0x0b, 0xa7, 0x85, 0x9e, 0x09, 0x70, 0xec, 0xfd, 0x75, 0x7e, 0xfe, 0xcf, 0x7c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd1, 0x41, 0x54, 0x47, 0x86, 0x62, 0x30, 0xd2, 0x8b, 0xb1, 0xea, 0x18, 0xa4, 0xcd, 0xfd, 0x02,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x51, 0x61, 0x83, 0x39, 0x2f, 0x7a, 0x87, 0x63, 0xaf, 0xec, 0x68, 0xa0, 0x60, 0x26, 0x41, 0x41,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x77, 0x56, 0x5c, 0x8d, 0x73, 0xcf, 0xd4, 0x13, 0x0b, 0x4a, 0xa1, 0x4d, 0x89, 0x11, 0x71, 0x0f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x37, 0x23, 0x2a, 0x4e, 0xd2, 0x1c, 0xcc, 0x27, 0xc1, 0x9c, 0x96, 0x10, 0x07, 0x8c, 0xab, 0xac,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x80, 0x4f, 0x32, 0xea, 0x71, 0x82, 0x8c, 0x7d, 0x32, 0x90, 0x77, 0xe7, 0x12, 0x23, 0x16, 0x66,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd6, 0x44, 0x24, 0xf2, 0x3c, 0xb9, 0x72, 0x15, 0xe9, 0xc2, 0xc6, 0xf2, 0x8d, 0x29, 0xea, 0xb7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x02, 0x3e, 0x82, 0xb5, 0x33, 0xf6, 0x8c, 0x75, 0xc2, 0x38, 0xce, 0xbd, 0xb2, 0xee, 0x89, 0xa2,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x19, 0x3a, 0x3d, 0x24, 0x15, 0x7a, 0x51, 0xf1, 0xee, 0x08, 0x93, 0xf6, 0x77, 0x74, 0x17, 0xe7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x84, 0xec, 0xac, 0xfc, 0xd4, 0x00, 0x08, 0x4d, 0x07, 0x86, 0x12, 0xb1, 0x94, 0x5f, 0x2e, 0xf5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1d, 0xcd, 0x8b, 0xb1, 0x73, 0x25, 0x9e, 0xb3, 0x3a, 0x52, 0x42, 0xb0, 0xde, 0x31, 0xa4, 0x55,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x35, 0xe9, 0xed, 0xdb, 0xc3, 0x75, 0xe7, 0x92, 0xc1, 0x99, 0x92, 0xc1, 0x91, 0x65, 0x01, 0x2b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8a, 0x77, 0x22, 0x31, 0xc0, 0x1d, 0xfd, 0xd7, 0xc9, 0x8e, 0x4c, 0xfd, 0xdc, 0xc0, 0x80, 0x7a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x6e, 0xda, 0x7f, 0xf6, 0xb8, 0x31, 0x91, 0x80, 0xff, 0x0d, 0x6e, 0x65, 0x62, 0x9d, 0x01, 0xc3,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xc2, 0x67, 0xef, 0x0e, 0x2d, 0x01, 0xa9, 0x93, 0x94, 0x4d, 0xd3, 0x97, 0x10, 0x14, 0x13, 0xcb,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe9, 0xf8, 0x0e, 0x9d, 0x84, 0x5b, 0xcc, 0x0f, 0x62, 0x92, 0x6a, 0xf7, 0x2e, 0xab, 0xca, 0x39,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x67, 0x02, 0x99, 0x07, 0x27, 0xaa, 0x08, 0x78, 0x63, 0x7b, 0x45, 0xdc, 0xd3, 0xa3, 0xb0, 0x74,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2e, 0x2e, 0x64, 0x7d, 0x53, 0x60, 0xe0, 0x92, 0x30, 0xa5, 0xd7, 0x38, 0xca, 0x33, 0x47, 0x1e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1f, 0x56, 0x41, 0x3c, 0x7a, 0xdd, 0x6f, 0x43, 0xd1, 0xd5, 0x6e, 0x4f, 0x02, 0x19, 0x03, 0x30,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x69, 0xcd, 0x06, 0x06, 0xe1, 0x5a, 0xf7, 0x29, 0xd6, 0xbc, 0xa1, 0x43, 0x01, 0x6d, 0x98, 0x42,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa0, 0x85, 0xd7, 0xc1, 0xa5, 0x00, 0x87, 0x3a, 0x20, 0x09, 0x9c, 0x4c, 0xaa, 0x3c, 0x3f, 0x5b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x4f, 0xc0, 0xd2, 0x30, 0xf8, 0x89, 0x14, 0x15, 0xb8, 0x7b, 0x83, 0xf9, 0x5f, 0x2e, 0x09, 0xd1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x43, 0x27, 0xd0, 0x8c, 0x52, 0x3d, 0x8e, 0xba, 0x69, 0x7a, 0x43, 0x36, 0x50, 0x7d, 0x1f, 0x42,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7a, 0x15, 0xaa, 0xb8, 0x27, 0x01, 0xef, 0xa5, 0xae, 0x36, 0xab, 0x1d, 0x6b, 0x76, 0x29, 0x0f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x5b, 0xf0, 0x05, 0x18, 0x93, 0xa1, 0x8b, 0xb3, 0x0e, 0x13, 0x9a, 0x58, 0xfe, 0xd0, 0xfa, 0x54,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x97, 0xe8, 0xad, 0xf6, 0x56, 0x38, 0xfd, 0x9c, 0xdf, 0x3b, 0xc2, 0x2c, 0x17, 0xfe, 0x4d, 0xbd,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1e, 0xe6, 0xee, 0x32, 0x65, 0x83, 0xa0, 0x58, 0x64, 0x91, 0xc9, 0x64, 0x18, 0xd1, 0xa3, 0x5d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x26, 0xb5, 0x49, 0xc2, 0xec, 0x75, 0x6f, 0x82, 0xec, 0xc4, 0x80, 0x08, 0xe5, 0x29, 0x95, 0x6b,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x70, 0x37, 0x7b, 0x6d, 0xa6, 0x69, 0xb0, 0x72, 0x12, 0x9e, 0x05, 0x7c, 0xc2, 0x8e, 0x9c, 0xa5,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x9c, 0x94, 0xb8, 0xb0, 0xcb, 0x8b, 0xcc, 0x91, 0x90, 0x72, 0x26, 0x2b, 0x3f, 0xa0, 0x5a, 0xd9,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2f, 0xbb, 0x83, 0xdf, 0xd0, 0xd7, 0xab, 0xcb, 0x05, 0xcd, 0x28, 0xca, 0xd2, 0xdf, 0xb5, 0x23,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x96, 0x87, 0x78, 0x03, 0xde, 0x77, 0x74, 0x4b, 0xb9, 0x70, 0xd0, 0xa9, 0x1f, 0x4d, 0xeb, 0xae,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x73, 0x79, 0xf3, 0x37, 0x0c, 0xf6, 0xe5, 0xce, 0x12, 0xae, 0x59, 0x69, 0xc8, 0xee, 0xa3, 0x12,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x02, 0xdc, 0x99, 0xfa, 0x3d, 0x4f, 0x98, 0xce, 0x80, 0x98, 0x5e, 0x72, 0x33, 0x88, 0x93, 0x13,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1e, 0x38, 0xe7, 0x59, 0x07, 0x5b, 0xa5, 0xca, 0xb6, 0x45, 0x7d, 0xa5, 0x18, 0x44, 0x29, 0x5a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x70, 0xbe, 0xd8, 0xdb, 0xf6, 0x15, 0x86, 0x8a, 0x1f, 0x9d, 0x9b, 0x05, 0xd3, 0xe7, 0xa2, 0x67,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x23, 0x4b, 0x14, 0x8b, 0x8c, 0xb1, 0xd8, 0xc3, 0x2b, 0x28, 0x7e, 0x89, 0x69, 0x03, 0xd1, 0x50,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x29, 0x4b, 0x03, 0x3d, 0xf4, 0xda, 0x85, 0x3f, 0x4b, 0xe3, 0xe2, 0x43, 0xf7, 0xe5, 0x13, 0xf4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3f, 0x58, 0xc9, 0x50, 0xf0, 0x36, 0x71, 0x60, 0xad, 0xec, 0x45, 0xf2, 0x44, 0x1e, 0x74, 0x11,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x37, 0xf6, 0x55, 0x53, 0x6a, 0x70, 0x4e, 0x5a, 0xce, 0x18, 0x2d, 0x74, 0x2a, 0x82, 0x0c, 0xf4,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xea, 0x7b, 0xd6, 0xbb, 0x63, 0x41, 0x87, 0x31, 0xae, 0xac, 0x79, 0x0f, 0xe4, 0x2d, 0x61, 0xe8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xe7, 0x4a, 0x4c, 0x99, 0x9b, 0x4c, 0x06, 0x4e, 0x48, 0xbb, 0x1e, 0x41, 0x3f, 0x51, 0xe5, 0xea,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xba, 0x9e, 0xbe, 0xfd, 0xb4, 0xcc, 0xf3, 0x0f, 0x29, 0x6c, 0xec, 0xb3, 0xbc, 0x19, 0x43, 0xe8,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x31, 0x94, 0x36, 0x7a, 0x48, 0x98, 0xc5, 0x02, 0xc1, 0x3b, 0xb7, 0x47, 0x86, 0x40, 0xa7, 0x2d,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xda, 0x79, 0x77, 0x13, 0x26, 0x3d, 0x6f, 0x33, 0xa5, 0x47, 0x8a, 0x65, 0xef, 0x60, 0xd4, 0x12,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd1, 0xac, 0x39, 0xbb, 0x1e, 0xf8, 0x6b, 0x9c, 0x13, 0x44, 0xf2, 0x14, 0x67, 0x9a, 0xa3, 0x76,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2f, 0xde, 0xa9, 0xe6, 0x50, 0x53, 0x2b, 0xe5, 0xbc, 0x0e, 0x73, 0x25, 0x33, 0x7f, 0xd3, 0x63,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd3, 0xa2, 0x04, 0xdb, 0xd9, 0xc2, 0xaf, 0x15, 0x8b, 0x6c, 0xa6, 0x7a, 0x51, 0x56, 0xce, 0x4a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x3a, 0x0a, 0x0e, 0x75, 0xa8, 0xda, 0x36, 0x73, 0x5a, 0xee, 0x66, 0x84, 0xd9, 0x65, 0xa7, 0x78,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x52, 0xfc, 0x3e, 0x62, 0x04, 0x92, 0xea, 0x99, 0x64, 0x1e, 0xa1, 0x68, 0xda, 0x5b, 0x6d, 0x52,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd2, 0xe0, 0xc7, 0xf1, 0x5b, 0x47, 0x72, 0x46, 0x7d, 0x2c, 0xfc, 0x87, 0x30, 0x00, 0xb2, 0xca,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x56, 0x35, 0x31, 0x13, 0x5e, 0x0c, 0x4d, 0x70, 0xa3, 0x8f, 0x8b, 0xdb, 0x19, 0x0b, 0xa0, 0x4e,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xa8, 0xa3, 0x9a, 0x0f, 0x56, 0x63, 0xf4, 0xc0, 0xfe, 0x5f, 0x2d, 0x3c, 0xaf, 0xff, 0x42, 0x1a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xd9, 0x4b, 0x5e, 0x90, 0xdb, 0x35, 0x4c, 0x1e, 0x42, 0xf6, 0x1f, 0xab, 0xe1, 0x67, 0xb2, 0xc0,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x50, 0xe6, 0xd3, 0xc9, 0xb6, 0x69, 0x8a, 0x7c, 0xd2, 0x76, 0xf9, 0x6b, 0x14, 0x73, 0xf3, 0x5a,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x93, 0x38, 0xf0, 0x8e, 0x0e, 0xbe, 0xe9, 0x69, 0x05, 0xd8, 0xf2, 0xe8, 0x25, 0x20, 0x8f, 0x43,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x8b, 0x37, 0x8c, 0x86, 0x67, 0x2a, 0xa5, 0x4a, 0x3a, 0x26, 0x6b, 0xa1, 0x9d, 0x25, 0x80, 0xca,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xcc, 0xa7, 0xc3, 0x08, 0x6f, 0x5f, 0x95, 0x11, 0xb3, 0x12, 0x33, 0xda, 0x7c, 0xab, 0x91, 0x60,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x5b, 0x40, 0xff, 0x4e, 0xc9, 0xbe, 0x53, 0x6b, 0xa2, 0x30, 0x35, 0xfa, 0x4f, 0x06, 0x06, 0x4c,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x60, 0xeb, 0x5a, 0xf8, 0x41, 0x6b, 0x25, 0x71, 0x49, 0x37, 0x21, 0x94, 0xe8, 0xb8, 0x87, 0x49,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x2f, 0x00, 0x5a, 0x8a, 0xed, 0x8a, 0x36, 0x1c, 0x92, 0xe4, 0x40, 0xc1, 0x55, 0x20, 0xcb, 0xd1,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x7b, 0x03, 0x62, 0x76, 0x11, 0x67, 0x8a, 0x99, 0x77, 0x17, 0x57, 0x88, 0x07, 0xa8, 0x00, 0xe2,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xcf, 0x78, 0x61, 0x8f, 0x74, 0xf6, 0xf3, 0x69, 0x6e, 0x0a, 0x47, 0x79, 0xb9, 0x0b, 0x5a, 0x77,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x03, 0x72, 0x03, 0x71, 0xa0, 0x49, 0x62, 0xea, 0xea, 0x0a, 0x85, 0x2e, 0x69, 0x97, 0x28, 0x58,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x1f, 0x8a, 0x81, 0x33, 0xaa, 0x8c, 0xcf, 0x70, 0xe2, 0xbd, 0x32, 0x85, 0x83, 0x1c, 0xa6, 0xb7,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x27, 0x93, 0x6b, 0xd2, 0x7f, 0xb1, 0x46, 0x8f, 0xc8, 0xb4, 0x8b, 0xc4, 0x83, 0x32, 0x17, 0x25,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0xb0, 0x7d, 0x4f, 0x3e, 0x2c, 0xd2, 0xef, 0x2e, 0xb5, 0x45, 0x98, 0x07, 0x54, 0xdf, 0xea, 0x0f,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
    {
        Vector!ubyte key = cast(ubyte[32]) [
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        ];
        const Vector!ubyte plaintext = (cast(ubyte[16]) [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]);
        const Vector!ubyte ciphertext = (cast(ubyte[16]) [
            0x4b, 0xf8, 0x5f, 0x1b, 0x5d, 0x54, 0xad, 0xbc, 0x30, 0x7b, 0x0a, 0x04, 0x83, 0x89, 0xad, 0xcb,
        ]);
        auto actual = Vector!ubyte(16);
        auto aes = defaultAllocator.make!(AES!256)(key);

        aes.encrypt(plaintext, actual);
        assert(actual == ciphertext);

        aes.decrypt(ciphertext, actual);
        assert(actual == plaintext);

        defaultAllocator.dispose(aes);
    }
}
